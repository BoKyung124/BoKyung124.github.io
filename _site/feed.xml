<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-11-24T14:25:21+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">갱로그</title><subtitle>&quot;bokyung&apos;s blog&quot;</subtitle><author><name>BoKyung</name></author><entry><title type="html">[DEV] 6주차. 데이터 웨어하우스와 SQL과 데이터분석(5)</title><link href="http://localhost:4000/data%20engineering/2023/11/17/1117.html" rel="alternate" type="text/html" title="[DEV] 6주차. 데이터 웨어하우스와 SQL과 데이터분석(5)" /><published>2023-11-17T00:00:00+09:00</published><updated>2023-11-18T02:00:00+09:00</updated><id>http://localhost:4000/data%20engineering/2023/11/17/1117</id><content type="html" xml:base="http://localhost:4000/data%20engineering/2023/11/17/1117.html"><![CDATA[<h2 id="1-사용자별로-처음-채널과-마지막-채널-알아내기">1. 사용자별로 처음 채널과 마지막 채널 알아내기</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ROW_NUMBER</code> 이용</li>
</ul>

<h3 id="cte를-빌딩블록으로">CTE를 빌딩블록으로</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span> <span class="k">first</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="n">userid</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="n">channel</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">userid</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ts</span><span class="p">)</span> <span class="n">seq</span>
    <span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span> <span class="n">usc</span>
    <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_timestamp</span> <span class="n">st</span> <span class="k">ON</span> <span class="n">usc</span><span class="p">.</span><span class="n">sessionid</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">sessionid</span>
<span class="p">),</span> <span class="k">last</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="n">userid</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="n">channel</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">userid</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ts</span> <span class="k">DESC</span><span class="p">)</span> <span class="n">seq</span>
    <span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span> <span class="n">usc</span>
    <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_timestamp</span> <span class="n">st</span> <span class="k">ON</span> <span class="n">usc</span><span class="p">.</span><span class="n">sessionid</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">sessionid</span>
<span class="p">)</span>
<span class="k">SELECT</span> <span class="k">first</span><span class="p">.</span><span class="n">userid</span> <span class="k">AS</span> <span class="n">userid</span><span class="p">,</span> <span class="k">first</span><span class="p">.</span><span class="n">channel</span> <span class="k">AS</span> <span class="n">first_channel</span><span class="p">,</span> <span class="k">last</span><span class="p">.</span><span class="n">channel</span> <span class="k">AS</span> <span class="n">last_channel</span>
<span class="k">FROM</span> <span class="k">first</span>
<span class="k">JOIN</span> <span class="k">last</span> <span class="k">ON</span> <span class="k">first</span><span class="p">.</span><span class="n">userid</span> <span class="o">=</span> <span class="k">last</span><span class="p">.</span><span class="n">userid</span> <span class="k">and</span> <span class="k">last</span><span class="p">.</span><span class="n">seq</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">WHERE</span> <span class="k">first</span><span class="p">.</span><span class="n">seq</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="join">JOIN</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">first</span><span class="p">.</span><span class="n">userid</span> <span class="k">AS</span> <span class="n">userid</span><span class="p">,</span> <span class="k">first</span><span class="p">.</span><span class="n">channel</span> <span class="k">AS</span> <span class="n">first_channel</span><span class="p">,</span> <span class="k">last</span><span class="p">.</span><span class="n">channel</span> <span class="k">AS</span> <span class="n">last_channel</span>
<span class="k">FROM</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="n">userid</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="n">channel</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">userid</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ts</span><span class="p">)</span> <span class="n">seq</span>
    <span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span> <span class="n">usc</span>
    <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_timestamp</span> <span class="n">st</span> <span class="k">ON</span> <span class="n">usc</span><span class="p">.</span><span class="n">sessionid</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">sessionid</span>
<span class="p">)</span> <span class="k">first</span>
<span class="k">JOIN</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="n">userid</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="n">channel</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">userid</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ts</span> <span class="k">DESC</span><span class="p">)</span> <span class="n">seq</span>
    <span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span> <span class="n">usc</span>
    <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_timestamp</span> <span class="n">st</span> <span class="k">ON</span> <span class="n">usc</span><span class="p">.</span><span class="n">sessionid</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">sessionid</span>
<span class="p">)</span> <span class="k">last</span> <span class="k">ON</span> <span class="k">first</span><span class="p">.</span><span class="n">userid</span> <span class="o">=</span> <span class="k">last</span><span class="p">.</span><span class="n">userid</span> <span class="k">and</span> <span class="k">last</span><span class="p">.</span><span class="n">seq</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">WHERE</span> <span class="k">first</span><span class="p">.</span><span class="n">seq</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="group-by">GROUP BY</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">uesrid</span><span class="p">,</span>
<span class="k">MAX</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">rn1</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">THEN</span> <span class="n">channel</span> <span class="k">END</span><span class="p">)</span> <span class="n">first_touch</span><span class="p">,</span>
<span class="k">MAX</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">rn2</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">THEN</span> <span class="n">channel</span> <span class="k">END</span><span class="p">)</span> <span class="n">last_touch</span>
<span class="k">FROM</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="n">userid</span><span class="p">,</span>
    <span class="n">channel</span><span class="p">,</span> 
    <span class="p">(</span><span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">userid</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">st</span><span class="p">.</span><span class="n">ts</span> <span class="k">asc</span><span class="p">))</span> <span class="k">AS</span> <span class="n">rn1</span><span class="p">,</span>
    <span class="p">(</span><span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">userid</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">st</span><span class="p">.</span><span class="n">ts</span> <span class="k">desc</span><span class="p">))</span> <span class="k">AS</span> <span class="n">rn2</span>
    <span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="k">user</span><span class="p">.</span><span class="n">sesiion_channel</span> <span class="n">usc</span>
    <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_stamp</span> <span class="n">st</span> <span class="k">ON</span> <span class="n">usc</span><span class="p">.</span><span class="n">sessionid</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">sessionid</span>
<span class="p">)</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="first-value--last-value">FIRST VALUE / LAST VALUE</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">DISTINCT</span>
    <span class="n">A</span><span class="p">.</span><span class="n">userid</span><span class="p">,</span>
    <span class="n">FIRST_VALUE</span><span class="p">(</span><span class="n">A</span><span class="p">.</span><span class="n">channel</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">userid</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">B</span><span class="p">.</span><span class="n">ts</span> <span class="k">rows</span> <span class="k">between</span> <span class="n">unbounded</span> <span class="k">preceding</span> <span class="k">and</span> <span class="n">unbounded</span> <span class="k">following</span><span class="p">)</span> <span class="k">AS</span> <span class="n">first_channel</span><span class="p">,</span>
    <span class="n">LAST_VALUE</span><span class="p">(</span><span class="n">A</span><span class="p">.</span><span class="n">channel</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">userid</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">B</span><span class="p">.</span><span class="n">ts</span> <span class="k">rows</span> <span class="k">between</span> <span class="n">unbounded</span> <span class="k">preceding</span> <span class="k">and</span> <span class="n">unbounded</span> <span class="k">following</span><span class="p">)</span> <span class="k">AS</span> <span class="n">last_channel</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span> <span class="n">A</span>
<span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_timestamp</span> <span class="n">B</span> <span class="k">ON</span> <span class="n">A</span><span class="p">.</span><span class="n">sessionid</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">sessionid</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="2-gross-revenue가-가장-큰-userid-10개-찾기">2. Gross Revenue가 가장 큰 userid 10개 찾기</h2>

<ul>
  <li>Gross Revenue : Refund를 포함한 매출</li>
</ul>

<h3 id="group-by-1">GROUP BY</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="n">userid</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_transaction</span> <span class="n">st</span>
<span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span> <span class="n">usc</span> <span class="k">ON</span> <span class="n">st</span><span class="p">.</span><span class="n">sessionid</span> <span class="o">=</span> <span class="n">usc</span><span class="p">.</span><span class="n">sessionid</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">2</span> <span class="k">DESC</span>
<span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="sum-over">SUM OVER</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">DISTINCT</span>
    <span class="n">userid</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">usc</span><span class="p">.</span><span class="n">userid</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_transaction</span> <span class="n">st</span>
<span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span> <span class="n">usc</span> <span class="k">ON</span> <span class="n">st</span><span class="p">.</span><span class="n">sessionid</span> <span class="o">=</span> <span class="n">usc</span><span class="p">.</span><span class="n">sessionid</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">2</span> <span class="k">DESC</span>
<span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="3-트랜잭션">3. 트랜잭션</h2>

<ul>
  <li>Atomic하게 실행되어야 하는 SQL들을 묶어서 하나의 작업처럼 처리하는 방법
    <ul>
      <li>DDL이나 DML 중 레코드를 수정/추가/삭제한 것에만 의미가 있음</li>
      <li>SELECT에는 트랜잭션을 사용할 이유가 없음</li>
      <li><code class="language-plaintext highlighter-rouge">BEGIN</code>과 <code class="language-plaintext highlighter-rouge">END</code> / <code class="language-plaintext highlighter-rouge">BEGIN</code>, <code class="language-plaintext highlighter-rouge">COMMIT</code> 사이에 SQL 문 사용</li>
    </ul>
  </li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">BEGIN</span><span class="p">;</span>
    <span class="n">A</span> <span class="err">계좌에서</span> <span class="err">인출</span><span class="p">;</span>     <span class="c1">-- 이 명령어들은 하나의 명령어처럼 처리되어</span>
    <span class="n">B</span> <span class="err">계좌로</span> <span class="err">인출</span><span class="p">;</span>       <span class="c1">-- 다 성공하든지 다 실패해야 함</span>
<span class="k">END</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">END</code>와 <code class="language-plaintext highlighter-rouge">COMMIT</code>은 동일</li>
  <li><code class="language-plaintext highlighter-rouge">BEGIN</code> 전으로 돌아가고 싶다면 <code class="language-plaintext highlighter-rouge">ROLLBACK</code> 실행</li>
</ul>

<h3 id="트랜잭션-커밋-모드-autocommit">트랜잭션 커밋 모드: autocommit</h3>

<ul>
  <li><strong>autocommit = True</strong>
    <ul>
      <li>모든 레코드 수정/삭제/추가 작업이 기본적으로 바로 DB에 쓰여짐 = commit 된다고 함</li>
      <li>특정 작업을 트랜잭션으로 묶고 싶다면 <code class="language-plaintext highlighter-rouge">BEGIN</code>과 <code class="language-plaintext highlighter-rouge">END(COMMIT)</code> / <code class="language-plaintext highlighter-rouge">ROLLBACK</code>으로 처리</li>
      <li>Google Colab은 기본적으로 모든 SQL문이 바로 커밋됨</li>
      <li>psycopg2는 <code class="language-plaintext highlighter-rouge">autocommit</code>으로 조절 가능</li>
    </ul>
  </li>
  <li><strong>autocommit = False</strong>
    <ul>
      <li>모든 레코드 수정/삭제/추가 작업이 <code class="language-plaintext highlighter-rouge">COMMIT</code>이 호출될 떄까지 커밋되지 않음</li>
      <li>많이 쓰이지는 않음</li>
    </ul>
  </li>
</ul>

<h2 id="4-delete-from-vs-truncate">4. DELETE FROM vs. TRUNCATE</h2>

<ul>
  <li><strong>DELETE FROM table_name</strong>
    <ul>
      <li>테이블에서 모든 레코드를 삭제</li>
      <li>vs. <code class="language-plaintext highlighter-rouge">DROP TABLE table_name</code> : 테이블 자체를 삭제</li>
      <li>WHERE을 사용하여 특정 레코드만 삭제 가능</li>
    </ul>
  </li>
  <li><strong>TRUNCATE table_name</strong>
    <ul>
      <li>테이블에서 모든 레코드를 삭제</li>
      <li><code class="language-plaintext highlighter-rouge">DELETE FROM</code>은 속도가 느림</li>
      <li><code class="language-plaintext highlighter-rouge">TRUNCATE</code>가 전체 테이블 내용 삭제 시에는 유리!</li>
      <li>단점
        <ul>
          <li><code class="language-plaintext highlighter-rouge">WHERE</code>을 지원하지 않음</li>
          <li>트랜잭션을 지원하지 않음</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="5-sql-문법들">5. SQL 문법들</h2>

<h3 id="union-except-intersect">UNION, EXCEPT, INTERSECT</h3>

<ul>
  <li><strong>UNION (합집합)</strong>
    <ul>
      <li>여러 개의 테이블들이나 SELECT 결과를 하나의 결과로 합쳐줌</li>
      <li>UNION ALL은 중복된 값도 모두 출력</li>
      <li>UNION은 중복 제거</li>
    </ul>
  </li>
  <li><strong>EXCEPT (MINUS)</strong>
    <ul>
      <li>하나의 SELECT 결과에서 다른 SELECT 결과를 뺌</li>
    </ul>
  </li>
  <li><strong>INTERSECT (교집합)</strong>
    <ul>
      <li>여러 개의 SELECT문에서 같은 레코드들만 찾아줌</li>
    </ul>
  </li>
  <li>EXCEPT, INTERSECT : SQL을 수정했을 때, 기존 SQL과 새 SQL의 차이점을 실제 레코드를 통해서 테스트하기 위해 많이 사용</li>
</ul>

<h3 id="coalesce-nullif">COALESCE, NULLIF</h3>

<ul>
  <li><strong>COALESCE(exp1, exp2, …)</strong>
    <ul>
      <li>첫번째 exp부터 값이 NULL이 아닌 것이 나오면 그 값을 리턴</li>
      <li>모두 NULL이면 NULL 리턴</li>
      <li>NULL 값을 다른 값으로 바꾸고 싶을 때 사용!</li>
    </ul>
  </li>
  <li><strong>NULLIF(exp1, exp2)</strong>
    <ul>
      <li>exp1과 exp2가 같으면 NULL 리턴</li>
      <li>다르면 exp1 리턴</li>
      <li>나누기 연산에서 분모에 사용할 수 있음</li>
    </ul>
  </li>
</ul>

<h3 id="listagg">LISTAGG</h3>

<ul>
  <li>GROUP BY에서 사용되는 Aggregate 함수 중 하나</li>
  <li>
    <p>그룹핑된 레코드들 안에서 특정 필드의 값을 옆으로 붙여주는 함수 (listing 형태로 aggregation)</p>
  </li>
  <li>ex) 사용자 ID 별로 방문한 채널을 시간순으로 리스트</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>
    <span class="n">userid</span><span class="p">,</span>
    <span class="n">LISTAGG</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="s1">'-&gt;'</span><span class="p">)</span> <span class="n">WITHIN</span> <span class="k">GROUP</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ts</span><span class="p">)</span> <span class="n">channels</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span> <span class="n">usc</span>
<span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_timestamp</span> <span class="n">st</span> <span class="k">ON</span> <span class="n">usc</span><span class="p">.</span><span class="n">sessionid</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">sessionid</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span>
<span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>

<span class="c1">-- 68 Youtube-&gt;Google-&gt;Instagram-&gt;Youtube-&gt;Instagram-&gt;Instagrm-&gt;Instagrm-&gt;Organic ...</span>
</code></pre></div></div>

<h3 id="window-함수">WINDOW 함수</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">function(exp) OVER([PARTITION BY exp][ORDER BY exp])</code></li>
  <li>functions
    <ul>
      <li>ROW_NUMBER, FIRST_VALUE, LAST_VALUE, LAG</li>
      <li>math: AVG, SUM, COUNT, MAX, MIN, MEDIAN, NTH_VALUE</li>
    </ul>
  </li>
</ul>

<h3 id="lag-함수">LAG 함수</h3>
<ul>
  <li>정렬된 레코드들에서 이전 값, 다음 값을 알고싶을 때 사용</li>
  <li>ex) 사용자 세션을 시간 순으로 봤을 때 앞 세션의 채널</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">usc</span><span class="p">.</span><span class="o">*</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">ts</span><span class="p">,</span>
    <span class="n">LAG</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">userid</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ts</span><span class="p">)</span> <span class="n">prev_channel</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span> <span class="n">usc</span>
<span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_timestamp</span> <span class="n">st</span> <span class="k">ON</span> <span class="n">usc</span><span class="p">.</span><span class="n">sessionid</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">sessionid</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">usc</span><span class="p">.</span><span class="n">userid</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">ts</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="json-parsing-functions">JSON Parsing Functions</h3>

<ul>
  <li>JSON의 포맷을 이미 아는 상황에서만 사용 가능
    <ul>
      <li>JSON String을 입력으로 받아 특정 필드의 값 추출 가능 (nested 구조 지원)</li>
    </ul>
  </li>
  <li>ex)</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">JSON_EXTRACT_PATH_TEXT</span><span class="p">(</span><span class="s1">'{"f2":{"f3":"1"}, "f4":{"f5":"99", "f6":"star"}}'</span><span class="p">,</span> <span class="s1">'f4'</span><span class="p">,</span> <span class="s1">'f6'</span><span class="p">)</span>   <span class="c1">-- star 출력</span>
</code></pre></div></div>

<p><img width="195" alt="스크린샷 2023-11-24 오전 3 05 34" src="https://github.com/bokyung124/bokyung124.github.io/assets/53086873/4b1b4fcd-78a1-45dc-affa-3df8a727c73d" /></p>]]></content><author><name>BoKyung</name></author><category term="Data Engineering" /><category term="DevCourse" /><category term="TIL" /><category term="DE" /><category term="KDT" /><summary type="html"><![CDATA[1. 사용자별로 처음 채널과 마지막 채널 알아내기]]></summary></entry><entry><title type="html">[DEV] 6주차. 데이터 웨어하우스와 SQL과 데이터분석(4)</title><link href="http://localhost:4000/data%20engineering/2023/11/16/1116.html" rel="alternate" type="text/html" title="[DEV] 6주차. 데이터 웨어하우스와 SQL과 데이터분석(4)" /><published>2023-11-16T00:00:00+09:00</published><updated>2023-11-17T02:00:00+09:00</updated><id>http://localhost:4000/data%20engineering/2023/11/16/1116</id><content type="html" xml:base="http://localhost:4000/data%20engineering/2023/11/16/1116.html"><![CDATA[<h2 id="1-join">1. JOIN</h2>

<ul>
  <li>2개 이상의 테이블들을 공통 필드를 가지고 머지하는 데 사용됨</li>
  <li>
    <p>star schema로 구성된 테이블들로 분산되어 있던 정보를 통합</p>
  </li>
  <li>JOIN 방식에 따라 <strong>어떤 레코드들이 선택되는지</strong>, <strong>어떤 필드들이 채워지는지</strong>가 달라짐</li>
</ul>

<h3 id="고려해야-할-점">고려해야 할 점</h3>
<ul>
  <li>중복 레코드가 없고, Primary key의 uniqueness가 보장됨을 반드시 체크해야 함!!</li>
  <li>조인하는 테이블들의 간의 관계를 명확히 정의
    <ul>
      <li>One to One
        <ul>
          <li>완전한 one to one</li>
          <li>한쪽이 부분집합이 되는 one to one</li>
        </ul>
      </li>
      <li>One to Many
        <ul>
          <li>이 경우 중복이 더 큰 문제가 됨</li>
          <li>order , order_items 등</li>
        </ul>
      </li>
      <li>Many to One
        <ul>
          <li>방향만 바꾸는 One to Many와 사실상 동일</li>
        </ul>
      </li>
      <li>Many to Many
        <ul>
          <li>이런 경우는 많지 않으며</li>
          <li>one to one이나 one to many로 바꾸는 것이 가능하다면 바꾸어 조인하는 것이 더 나음</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>어느 테이블을 베이스로 잡을지 (From에 사용할지) 결정해야 함</li>
</ul>

<h3 id="inner-join">Inner join</h3>

<ul>
  <li>양쪽 테이블에서 매치가 되는 레코드들만 리턴</li>
  <li>양쪽 테이블의 필드가 모두 채워진 상태로 리턴됨</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">Vital</span> <span class="n">v</span>
<span class="p">(</span><span class="k">INNER</span><span class="p">)</span> <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">Alert</span> <span class="n">a</span> <span class="k">ON</span> <span class="n">v</span><span class="p">.</span><span class="n">vitalID</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">vitalID</span><span class="p">;</span>
</code></pre></div></div>

<p><img width="890" alt="스크린샷 2023-11-22 오후 5 53 00" src="https://github.com/bokyung124/bokyung124.github.io/assets/53086873/281034a2-c7f4-4eb5-889c-d2b6cd8c5853" /></p>

<h3 id="left-join">LEFT JOIN</h3>

<ul>
  <li>왼쪽 테이블(Base)의 모든 레코드들을 리턴</li>
  <li>오른쪽 테이블의 필드는 왼쪽 레코드와 매칭되는 경우에만 채워진 상태로 리턴됨</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">Vital</span> <span class="n">v</span>
<span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">Alert</span> <span class="n">a</span> <span class="k">ON</span> <span class="n">v</span><span class="p">.</span><span class="n">vitalID</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">vitalID</span><span class="p">;</span>
</code></pre></div></div>

<p><img width="934" alt="스크린샷 2023-11-22 오후 5 53 21" src="https://github.com/bokyung124/bokyung124.github.io/assets/53086873/53a4ee9c-f588-4746-a0cb-6c5d9c7b11a0" /></p>

<h3 id="full-join">FULL JOIN</h3>

<ul>
  <li>왼쪽 테이블과 오른쪽 테이블의 모든 레코드들을 리턴</li>
  <li>매칭되는 경우에만 양쪽 테이블들의 모든 필드들이 채워진 상태로 리턴됨</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">Vital</span> <span class="n">v</span>
<span class="k">FULL</span> <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">Alert</span> <span class="n">a</span> <span class="k">ON</span> <span class="n">v</span><span class="p">.</span><span class="n">vitalID</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">vitalID</span><span class="p">;</span>
</code></pre></div></div>

<p><img width="921" alt="스크린샷 2023-11-22 오후 5 56 54" src="https://github.com/bokyung124/bokyung124.github.io/assets/53086873/4c3d9b4b-47b0-43c6-99de-78d06cea0eac" /></p>

<h3 id="cross-join">CROSS JOIN</h3>

<ul>
  <li>왼쪽 테이블과 오른쪽 테이블의 모든 레코드들의 조합을 리턴</li>
  <li>(왼쪽 테이블 row 수) x (오른쪽 테이블 row 수) 만큼의 행이 리턴됨</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">Vital</span> <span class="n">v</span> 
<span class="k">CROSS</span> <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">Alert</span> <span class="n">a</span><span class="p">;</span>
</code></pre></div></div>

<p><img width="945" alt="스크린샷 2023-11-22 오후 6 00 17" src="https://github.com/bokyung124/bokyung124.github.io/assets/53086873/8161de1b-6e70-4947-a06e-bd966b2f43dc" /></p>

<h3 id="self-join">SELF JOIN</h3>

<ul>
  <li>동일한 테이블을 alias를 달리해서 자기 자신과 조인</li>
  <li>보통 조인 조건이 조금 다름</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">Vital</span> <span class="n">v1</span>
<span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">Vital</span> <span class="n">v2</span> <span class="k">ON</span> <span class="n">v1</span><span class="p">.</span><span class="n">vitalID</span> <span class="o">=</span> <span class="n">v2</span><span class="p">.</span><span class="n">vitalID</span><span class="p">;</span>
</code></pre></div></div>

<p><img width="865" alt="스크린샷 2023-11-22 오후 6 01 22" src="https://github.com/bokyung124/bokyung124.github.io/assets/53086873/1a94cc60-4430-4ef3-baff-ecee8fb8bd53" /></p>

<h2 id="2-boolean-타입">2. BOOLEAN 타입</h2>

<ul>
  <li>raw_data.boolean_test</li>
</ul>

<table>
  <thead>
    <tr>
      <th>flag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>True</td>
    </tr>
    <tr>
      <td>False</td>
    </tr>
    <tr>
      <td>True</td>
    </tr>
    <tr>
      <td>NULL</td>
    </tr>
    <tr>
      <td>False</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">flag = True</code>, <code class="language-plaintext highlighter-rouge">flag is True</code>는 동일한 표현</li>
  <li><code class="language-plaintext highlighter-rouge">flag is True</code>, <code class="language-plaintext highlighter-rouge">flag is not False</code>는 항상 같은 표현은 아님!
    <ul>
      <li>항상 True, False 값만 있는 건 아니기 때문 (<strong>NULL</strong>)</li>
    </ul>
  </li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">flag</span> <span class="o">=</span> <span class="k">True</span> <span class="k">THEN</span> <span class="mi">1</span> <span class="k">END</span><span class="p">)</span> <span class="n">true_cnt1</span><span class="p">,</span>        <span class="c1">-- 2</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">flag</span> <span class="k">is</span> <span class="k">True</span> <span class="k">THEN</span> <span class="mi">1</span> <span class="k">END</span><span class="p">)</span> <span class="n">true_cnt1</span><span class="p">,</span>       <span class="c1">-- 2</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">flag</span> <span class="k">is</span> <span class="k">not</span> <span class="k">False</span> <span class="k">THEN</span> <span class="mi">1</span> <span class="k">END</span><span class="p">)</span> <span class="n">true_cnt1</span><span class="p">,</span>  <span class="c1">-- 3</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">boolean_test</span><span class="p">;</span> 
</code></pre></div></div>

<h2 id="3-null-비교">3. NULL 비교</h2>

<ul>
  <li>NULL 비교는 항상 <code class="language-plaintext highlighter-rouge">IS</code> 혹은 <code class="language-plaintext highlighter-rouge">IS NOT</code> 으로 수행!</li>
  <li><code class="language-plaintext highlighter-rouge">=</code>, <code class="language-plaintext highlighter-rouge">!=</code>, <code class="language-plaintext highlighter-rouge">&lt; &gt;</code> 으로 수행하면 잘못된 결과가 나옴 (대부분 0으로 나옴)</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">boolean_test</span>
<span class="k">WHERE</span> <span class="n">flag</span> <span class="k">is</span> <span class="k">NULL</span><span class="p">;</span>
<span class="c1">-- 1</span>

<span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">boolean_test</span>
<span class="k">WHERE</span> <span class="n">flag</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">;</span>
<span class="c1">-- 0</span>
</code></pre></div></div>

<h2 id="4-채널별-월별-매출액-테이블-만들기">4. 채널별 월별 매출액 테이블 만들기</h2>

<ul>
  <li>tables
    <ul>
      <li>session_timestamp</li>
      <li>user_session_channel</li>
      <li>session_transaction</li>
    </ul>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>field</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>month</td>
      <td>월</td>
    </tr>
    <tr>
      <td>channel</td>
      <td>채널명</td>
    </tr>
    <tr>
      <td>uniqueUsers</td>
      <td>총 방문 사용자</td>
    </tr>
    <tr>
      <td>paidUsers</td>
      <td>구매 사용자: refund한 경우도 판매로 고려</td>
    </tr>
    <tr>
      <td>conversionRate</td>
      <td>구매사용자 / 총방문사용자</td>
    </tr>
    <tr>
      <td>grossRevenue</td>
      <td>refund 포함</td>
    </tr>
    <tr>
      <td>netRevenue</td>
      <td>refund 제외</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">adhoc</span><span class="p">.</span><span class="n">bk_monthly_channel_summary</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">adhoc</span><span class="p">.</span><span class="n">bk_monthly_channel_summary</span> <span class="k">AS</span>
    <span class="k">SELECT</span> 
        <span class="k">LEFT</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">ts</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span> <span class="nv">"month"</span><span class="p">,</span>
        <span class="n">usc</span><span class="p">.</span><span class="n">channel</span><span class="p">,</span>
        <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">userid</span><span class="p">)</span> <span class="n">uniqueUsers</span>
        <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">amount</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">THEN</span> <span class="n">usc</span><span class="p">.</span><span class="n">userid</span> <span class="k">END</span><span class="p">)</span> <span class="n">paidUsers</span><span class="p">,</span>
        <span class="n">ROUND</span><span class="p">(</span><span class="n">paidUsers</span><span class="p">::</span><span class="nb">float</span><span class="o">*</span><span class="mi">100</span><span class="o">/</span><span class="k">NULLIF</span><span class="p">(</span><span class="n">uniqueUsers</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span> <span class="n">conversionRate</span><span class="p">,</span>
        <span class="k">SUM</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">amount</span><span class="p">)</span> <span class="n">grossRevenue</span><span class="p">,</span>
        <span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">st</span><span class="p">.</span><span class="n">refunded</span> <span class="k">is</span> <span class="k">False</span> <span class="k">THEN</span> <span class="n">st</span><span class="p">.</span><span class="n">amount</span> <span class="k">END</span><span class="p">)</span> <span class="n">netRevenue</span>
    <span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span> <span class="n">usc</span>
    <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_timestamp</span> <span class="n">t</span> <span class="k">ON</span> <span class="n">t</span><span class="p">.</span><span class="n">sessionid</span> <span class="o">=</span> <span class="n">usc</span><span class="p">.</span><span class="n">sessionid</span>
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_transaction</span> <span class="n">st</span> <span class="k">ON</span> <span class="n">st</span><span class="p">.</span><span class="n">sessionid</span> <span class="o">=</span> <span class="n">usc</span><span class="p">.</span><span class="n">sessionid</span>
    <span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="5-coalesce-함수">5. COALESCE 함수</h2>

<ul>
  <li>NULL 값을 다른 값으로 바꿔주는 함수</li>
  <li><code class="language-plaintext highlighter-rouge">COALESCE(exp1, exp2, exp3, ...)</code>
    <ul>
      <li>exp1부터 인자를 하나씩 살펴서 NULL이 아닌 값이 나오면 그것을 리턴</li>
      <li>끝까지 확인했는데도 모두 NULL이면 최종적으로 NULL 리턴</li>
    </ul>
  </li>
</ul>

<h2 id="6-공백-또는-예약키워드를-필드-이름으로-사용하려면">6. 공백 또는 예약키워드를 필드 이름으로 사용하려면</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">" "</code>로 둘러싸서 사용!</li>
  <li>but 쿼리에서 사용할 때에도 계속 <code class="language-plaintext highlighter-rouge">" "</code>를 사용해야 하기 때문에 번거로움</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">bk</span><span class="p">.</span><span class="n">test</span> <span class="p">(</span>
    <span class="nv">"group"</span>           <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>   <span class="c1">-- keyword</span>
    <span class="nv">"mailing address"</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>        <span class="c1">-- blank</span>
<span class="p">);</span>
</code></pre></div></div>]]></content><author><name>BoKyung</name></author><category term="Data Engineering" /><category term="DevCourse" /><category term="TIL" /><category term="DE" /><category term="KDT" /><summary type="html"><![CDATA[1. JOIN]]></summary></entry><entry><title type="html">[DEV] 6주차. 데이터 웨어하우스와 SQL과 데이터분석(3)</title><link href="http://localhost:4000/data%20engineering/2023/11/15/1115.html" rel="alternate" type="text/html" title="[DEV] 6주차. 데이터 웨어하우스와 SQL과 데이터분석(3)" /><published>2023-11-15T00:00:00+09:00</published><updated>2023-11-16T02:00:00+09:00</updated><id>http://localhost:4000/data%20engineering/2023/11/15/1115</id><content type="html" xml:base="http://localhost:4000/data%20engineering/2023/11/15/1115.html"><![CDATA[<h2 id="1-group-by--aggregate-함수">1. GROUP BY &amp; Aggregate 함수</h2>

<ul>
  <li>테이블의 레코드들을 그룹핑하여 그룹별로 다양한 정보 계산</li>
  <li>단계
    <ul>
      <li>먼저 그룹핑을 할 필드 결정 (하나 이상의 필드가 될 수 있음)</li>
      <li>다음 그룹별로 계산할 내용 결정
        <ul>
          <li>여기서 Aggregate 함수 사용</li>
          <li>COUNT, SUM, AVG, MIN, MAX, LISTAGG, …</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="월별-세션-수-계산">월별 세션 수 계산</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="k">LEFT</span><span class="p">(</span><span class="n">ts</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span> <span class="k">AS</span> <span class="n">mon</span><span class="p">,</span>  <span class="c1">-- field, 왼쪽에서 부터 몇번째까지</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="n">session_count</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_timestamp</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span> <span class="c1">-- GROUP BY mon, GROUP BY LEFT(ts, 7)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>ts 필드
    <ul>
      <li>timestamp, 문자열 함수에 들어가면 string으로 바뀜</li>
      <li>YYYY-mm-dd-hh-mm-ss.ms</li>
      <li>7번째 자리까지 하면 년, 월을 뽑을 수 있음</li>
    </ul>
  </li>
</ul>

<h3 id="가장-많이-사용된-채널은-무엇인가">가장 많이 사용된 채널은 무엇인가</h3>

<ul>
  <li>가장 많이 사용되었다는 정의?
    <ul>
      <li>사용자 기반 혹은 세션 기반?</li>
    </ul>
  </li>
  <li>필요한 정보 : 채널 정보, 사용자 정보, 혹은 세션 정보</li>
  <li>먼저 어느 테이블을 사용해야하는지 생각!
    <ul>
      <li><strong>user_session_channel</strong></li>
    </ul>
  </li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="n">channel</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="n">channel_count</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">userId</span><span class="p">)</span> <span class="k">AS</span> <span class="n">user_count</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">2</span> <span class="k">DESC</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="가장-많은-세션을-만들어낸-사용자-id는-무엇인가">가장 많은 세션을 만들어낸 사용자 ID는 무엇인가?</h3>

<ul>
  <li>필요한 정보 : 세션 정보, 사용자 정보</li>
  <li>먼저 어느 테이블을 사용해야하는지 생각!
    <ul>
      <li><strong>user_session_channel</strong></li>
    </ul>
  </li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="n">userId</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="k">count</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">2</span> <span class="k">DESC</span>
<span class="k">LIMIT</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="월별-유니크한-사용자-수-mau---monthly-active-user">월별 유니크한 사용자 수 (MAU - Monthly Active User)</h3>
<ul>
  <li>
    <p>한 사용자는 한번만 카운트 되어야 함</p>
  </li>
  <li>필요한 정보 : 시간 정보, 사용자 정보</li>
  <li>먼저 어느 테이블을 사용해야하는지 생각!
    <ul>
      <li>user_session_channel (userId, <strong>sessionId</strong>, channel)</li>
      <li>session_timestamp(<strong>sessionId</strong>, ts)</li>
      <li>join!</li>
    </ul>
  </li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="n">TO_CHAR</span><span class="p">(</span><span class="n">A</span><span class="p">.</span><span class="n">ts</span><span class="p">,</span> <span class="s1">'YYYY-MM'</span><span class="p">)</span> <span class="k">AS</span> <span class="k">month</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">B</span><span class="p">.</span><span class="n">userId</span><span class="p">)</span> <span class="k">AS</span> <span class="n">mau</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_timestamp</span> <span class="n">A</span>
<span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span> <span class="n">B</span> <span class="k">ON</span> <span class="n">A</span><span class="p">.</span><span class="n">sessionId</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">sessionId</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">1</span> <span class="k">DESC</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="string-cut">string cut</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">TO_CHAR(A.ts, 'YYYY-MM')</code></li>
  <li><code class="language-plaintext highlighter-rouge">LEFT(A.ts, 7)</code></li>
  <li><code class="language-plaintext highlighter-rouge">DATE_TRUNC('month', A.ts)</code></li>
  <li><code class="language-plaintext highlighter-rouge">SUBSTRING(A.ts, 1, 7)</code></li>
</ul>

<h3 id="월별-채널별-유니크한-사용자-수">월별 채널별 유니크한 사용자 수</h3>

<ul>
  <li>필요한 정보 : 시간 정보, 사용자 정보, 채널 정보</li>
  <li>먼저 어느 테이블을 사용해야하는지 생각
    <ul>
      <li>user_session_channel (userId, <strong>sessionId</strong>, <strong>channel</strong>)</li>
      <li>session_timestamp (<strong>sessionId</strong>, ts)</li>
    </ul>
  </li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="n">TO_CHAR</span><span class="p">(</span><span class="n">A</span><span class="p">.</span><span class="n">ts</span><span class="p">,</span> <span class="s1">'YYYY-MM'</span><span class="p">)</span> <span class="k">AS</span> <span class="k">month</span><span class="p">,</span>
    <span class="n">channel</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">B</span><span class="p">.</span><span class="n">userId</span><span class="p">)</span> <span class="k">AS</span> <span class="n">mau</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_timestamp</span> <span class="n">A</span>
<span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_chanel</span> <span class="n">B</span> <span class="k">ON</span> <span class="n">A</span><span class="p">.</span><span class="n">sessionId</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">sessionId</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">1</span> <span class="k">DESC</span><span class="p">,</span> <span class="mi">2</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="3-ctas">3. CTAS</h2>
<ul>
  <li>SELECT로 간단하게 새로운 테이블 생성하는 방법</li>
  <li>자주 조인하는 테이블들이 있다면 CTAS를 사용해 조인해두면 편리해짐</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">adhoc</span><span class="p">.</span><span class="n">bk_session_summary</span> <span class="k">AS</span>
<span class="k">SELECT</span> <span class="n">B</span><span class="p">.</span><span class="o">*</span><span class="p">,</span> <span class="n">A</span><span class="p">.</span><span class="n">ts</span> <span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">session_timestamp</span> <span class="n">A</span>
<span class="k">JOIN</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span> <span class="n">B</span> <span class="k">ON</span> <span class="n">A</span><span class="p">.</span><span class="n">sessionId</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">sessionId</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="2-데이터-품질-확인">2. 데이터 품질 확인</h2>

<h3 id="중복된-레코드-확인">중복된 레코드 확인</h3>

<ul>
  <li>count 비교</li>
  <li>
    <p>전체 count와 DISTINCT count 결과가 같으면 통과!</p>
  </li>
  <li><strong>CTAS</strong></li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">adhoc</span><span class="p">.</span><span class="n">bk_session_summary</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="k">FROM</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">userId</span><span class="p">,</span> <span class="n">sessionId</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="n">channel</span>    <span class="c1">-- 모든 필드</span>
    <span class="k">FROM</span> <span class="n">adhoc</span><span class="p">.</span><span class="n">bk_session_summary</span>
<span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li><strong>CTE</strong></li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">With</span> <span class="n">ds</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">userId</span><span class="p">,</span> <span class="n">sessionId</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="n">channel</span>
    <span class="k">FROM</span> <span class="n">adhoc</span><span class="p">.</span><span class="n">bk_session_summary</span>
<span class="p">)</span>
<span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">ds</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">With _ AS</code>
    <ul>
      <li>AS 다음 결과가 _ 이름의 임시 table로 생성됨</li>
      <li>뒷단에서 반복 사용할 수 있기 때문에 조금 더 좋음</li>
    </ul>
  </li>
</ul>

<h3 id="최근-데이터의-존재-여부-체크">최근 데이터의 존재 여부 체크</h3>

<ul>
  <li>timestamp / create 등의 필드가 있다면 확인</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">MIN</span><span class="p">(</span><span class="n">ts</span><span class="p">),</span> <span class="k">MAX</span><span class="p">(</span><span class="n">ts</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">adhoc</span><span class="p">.</span><span class="n">bk_session_summary</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="primary-key-uniqueness가-지켜지는지-체크">Primary key uniqueness가 지켜지는지 체크</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">LIMIT 1</code>을 했을 때 count가 1보다 크면 지켜지지 않고 있음을 나타냄</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">sessionId</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>    <span class="c1">-- sessionId가 pk</span>
<span class="k">FROM</span> <span class="n">adhoc</span><span class="p">.</span><span class="n">bk_session_summary</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">2</span> <span class="k">DESC</span>
<span class="k">LIMIT</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="값이-비어있는-컬럼들이-있는지-체크">값이 비어있는 컬럼들이 있는지 체크</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="k">COUNT</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">sessionId</span> <span class="k">is</span> <span class="k">NULL</span> <span class="k">THEN</span> <span class="mi">1</span> <span class="k">END</span><span class="p">)</span> <span class="n">sessionId_null_count</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">userId</span> <span class="k">is</span> <span class="k">NULL</span> <span class="k">THEN</span> <span class="mi">1</span> <span class="k">END</span><span class="p">)</span> <span class="n">userId_null_count</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">ts</span> <span class="k">is</span> <span class="k">NULL</span> <span class="k">THEN</span> <span class="mi">1</span> <span class="k">END</span><span class="p">)</span> <span class="n">ts_null_count</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">channel</span> <span class="k">is</span> <span class="k">NULL</span> <span class="k">THEN</span> <span class="mi">1</span> <span class="k">END</span><span class="p">)</span> <span class="n">channel_null_count</span>
<span class="k">FROM</span> <span class="n">adhoc</span><span class="p">.</span><span class="n">bk_session_summary</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name>BoKyung</name></author><category term="Data Engineering" /><category term="DevCourse" /><category term="TIL" /><category term="DE" /><category term="KDT" /><summary type="html"><![CDATA[1. GROUP BY &amp; Aggregate 함수]]></summary></entry><entry><title type="html">[DEV] 6주차. 데이터 웨어하우스와 SQL과 데이터분석(2)</title><link href="http://localhost:4000/data%20engineering/2023/11/14/1114.html" rel="alternate" type="text/html" title="[DEV] 6주차. 데이터 웨어하우스와 SQL과 데이터분석(2)" /><published>2023-11-14T00:00:00+09:00</published><updated>2023-11-15T02:00:00+09:00</updated><id>http://localhost:4000/data%20engineering/2023/11/14/1114</id><content type="html" xml:base="http://localhost:4000/data%20engineering/2023/11/14/1114.html"><![CDATA[<h2 id="1-redshift-론치-데모">1. Redshift 론치 데모</h2>

<ul>
  <li>aws에서 AWS Redshift 클러스터 생성</li>
  <li>실습용이기 때문에 가장 저렴한 <strong>dc2.large</strong> 선택</li>
  <li>노드는 1개</li>
  <li>샘플 데이터 X</li>
  <li><strong>추가 구성</strong> 기본값 사용 해제
    <ul>
      <li><strong>네트워크 및 보안</strong>에서 <strong>퍼블릭 액세스 가능</strong> 선택!  <br />
  -&gt; colab에서 액세스 가능</li>
    </ul>
  </li>
</ul>

<h3 id="error-invalidclustersubnetgroupstatefault">Error <code class="language-plaintext highlighter-rouge">InvalidClusterSubnetGroupStateFault</code></h3>

<p><strong>Vpc associated with db subnet group does not exist.</strong> 오류 발생</p>

<ul>
  <li>Redshift - [구성] 에서 서브넷 그룹 생성해야함!</li>
</ul>

<p><a href="https://docs.aws.amazon.com/ko_kr/redshift/latest/mgmt/managing-cluster-subnet-group-console.html">https://docs.aws.amazon.com/ko_kr/redshift/latest/mgmt/managing-cluster-subnet-group-console.html</a> 참고</p>

<p><br /></p>

<h2 id="2-예제-테이블---웹서비스-사용자세션-정보">2. 예제 테이블 - 웹서비스 사용자/세션 정보</h2>

<ul>
  <li><strong>사용자 ID</strong> : 보통 웹서비스에서 등록된 사용자마다 부여하는 유일한 ID</li>
  <li><strong>세션 ID</strong> : 세션마다 부여되는 ID
    <ul>
      <li>세션 : 사용자의 방문을 논리적인 단위로 나눈 것
        <ul>
          <li>사용자가 외부 링크를 타고 오거나 직접 방문해서 올 경우 세션을 생성</li>
          <li>사용자가 방문 후 30분간 interaction이 없다가 뭔가를 하는 경우 새로 세션을 생성</li>
        </ul>
      </li>
      <li>하나의 사용자는 여러 개의 세션을 가질 수 있음</li>
      <li>보통 세션의 경우 세션을 만들어낸 접점(경유지)을 <strong>채널</strong>이라는 이름으로 기록해 둠
        <ul>
          <li>마케팅 관련 기여도 분석을 위함</li>
        </ul>
      </li>
      <li><strong>세션이 생긴 시간</strong>도 기록</li>
    </ul>
  </li>
  <li>이 정보를 기반으로 다양한 데이터 분석과 지표 설정 가능
    <ul>
      <li>마케팅 / 사용자 트래픽 관련</li>
      <li>일주일 / 월 별 Active User 차트</li>
      <li>마케팅 채널 기여도 분석</li>
    </ul>
  </li>
</ul>

<h2 id="3-sql-기본">3. SQL 기본</h2>

<ul>
  <li>다수의 SQL문을 실행한다면 세미콜론으로 분리 필요</li>
  <li>주석
    <ul>
      <li><code class="language-plaintext highlighter-rouge">--</code> : 인라인 한 줄짜리 주석</li>
      <li><code class="language-plaintext highlighter-rouge">/* */</code> : 여러 줄에 걸쳐 사용 가능한 주석</li>
    </ul>
  </li>
  <li>SQL 키워드는 대문자를 사용한다든지 하는 나름의 포맷팅 필요
    <ul>
      <li>팀플이라면 팀에서 사용하는 공통 포맷 필요</li>
    </ul>
  </li>
  <li>테이블/필드 이름의 명명 규칙 정하는 것이 중요
    <ul>
      <li>단수형 vs. 복수형
        <ul>
          <li>User vs. Users</li>
        </ul>
      </li>
      <li>_ vs. CamelCasing
        <ul>
          <li>user_session_channel vs. UserSessionChannel</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="4-데이터를-다룰-때-기억할-점">4. 데이터를 다룰 때 기억할 점</h2>
<ul>
  <li><strong>현업에서 깨끗한 데이터란 존재하지 않음</strong>
    <ul>
      <li>항상 데이터를 믿을 수 있는지 의심할 것!</li>
      <li>실제 레코드를 몇 개 살펴보는 것 만한 것이 없음!</li>
    </ul>
  </li>
  <li><strong>데이터 일을 한다면 항상 데이터의 품질을 의심하고 체크하는 버릇이 필요함</strong>
    <ul>
      <li>중복된 레코드들 체크하기</li>
      <li>최근 데이터의 존재 여부 체크하기 (freshness)</li>
      <li>Primary Key Uniqueness가 지켜지는지 체크하기</li>
      <li>값이 비어있는 컬럼들이 있는지 체크하기</li>
      <li>위의 체크는 unit test 형태로 만들어 매번 쉽게 체크해볼 수 있음</li>
    </ul>
  </li>
  <li>어느 시점이 되면 너무 많은 테이블들이 존재하게 됨
    <ul>
      <li><strong>중요 테이블들이 무엇이고, 그것들의 메타 정보를 잘 관리하는 것이 중요해짐</strong></li>
      <li>회사가 작을 때부터 규칙을 잘 만드는 것이 중요</li>
    </ul>
  </li>
  <li><strong>그 시점부터는 Data Discovery 문제들이 생겨남</strong>
    <ul>
      <li>무슨 테이블에 내가 원하고 신뢰할 수 있는 정보가 들어있나?</li>
      <li>테이블에 대해 질문을 하고싶은데 누구에게 해야하나?</li>
    </ul>
  </li>
  <li>이 문제를 해결하기 위한 다양한 오픈소스와 서비스들이 출현
    <ul>
      <li>DataHub (LinkedIn), Amundsen (Lyft), …</li>
      <li>Select Star, DataFrame, …</li>
    </ul>
  </li>
</ul>

<h2 id="5-colab에서-사용">5. Colab에서 사용</h2>

<ul>
  <li>주피터 SQL 엔진 설정</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">load_ext</span> <span class="n">sql</span>

<span class="c1"># ID, PW 설정
</span><span class="o">%</span><span class="n">sql</span> <span class="n">postgresql</span><span class="p">:</span><span class="o">//</span><span class="p">[</span><span class="nb">id</span><span class="p">]:[</span><span class="n">pw</span><span class="p">]</span><span class="o">@</span><span class="p">[</span><span class="n">cluster</span><span class="p">].[</span><span class="n">host</span><span class="p">]:[</span><span class="n">port</span><span class="p">]</span><span class="o">/</span><span class="p">[</span><span class="n">db</span><span class="p">]</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>sql문 작성</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="k">sql</span>

<span class="k">SELECT</span> <span class="o">*</span>
<span class="k">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span>
<span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>userid	      sessionid	                channel
184	c41dd99a69df04044aa4e33ece9c9249	Naver
251	0a54b19a13b6712dc04d1b49215423d8	Facebook
744	05ae14d7ae387b93370d142d82220f1b	Facebook
265	4c4ea5258ef3fb3fb1fc48fee9b4408c	Naver
45	60131a2a3f223dc8f4753bcc5771660c	Youtube
262	761efc843ff05ab74ed358713dd51c1b	Organic
702	8c97dbeee3b0d40ced7f514b99a93d93	Instagram
113	7f2cba89a7116c7c6b0a769572d5fad9	Organic
788	a8c6dd982010fce8701ce1aef8a2d40a	Google
645	593906af0d138e69f49d251d3e7cbed0	Youtube
</code></pre></div></div>

<h3 id="connection-error">connection error</h3>

<ul>
  <li>Google Colab의 SQLAlchemy 버전이 업그레이드되면서 충돌 발생</li>
  <li>다운그레이드 필요</li>
  <li>아래 코드 실행 후 런타임 재실행</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">ipython</span><span class="o">-</span><span class="n">sql</span><span class="o">==</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">1</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">SQLAlchemy</span><span class="o">==</span><span class="mf">1.4</span><span class="p">.</span><span class="mi">49</span>
</code></pre></div></div>

<h2 id="6-pandas와-연동">6. Pandas와 연동</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span> <span class="o">=</span> <span class="o">%</span><span class="n">sql</span> <span class="n">SELECT</span> <span class="o">*</span> <span class="n">FROM</span> <span class="n">raw_data</span><span class="p">.</span><span class="n">user_session_channel</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name>BoKyung</name></author><category term="Data Engineering" /><category term="DevCourse" /><category term="TIL" /><category term="DE" /><category term="KDT" /><summary type="html"><![CDATA[1. Redshift 론치 데모]]></summary></entry><entry><title type="html">[DEV] 6주차. 데이터 웨어하우스와 SQL과 데이터분석(1)</title><link href="http://localhost:4000/data%20engineering/2023/11/13/1113.html" rel="alternate" type="text/html" title="[DEV] 6주차. 데이터 웨어하우스와 SQL과 데이터분석(1)" /><published>2023-11-13T00:00:00+09:00</published><updated>2023-11-14T02:00:00+09:00</updated><id>http://localhost:4000/data%20engineering/2023/11/13/1113</id><content type="html" xml:base="http://localhost:4000/data%20engineering/2023/11/13/1113.html"><![CDATA[<h2 id="1-데이터-분야에서-sql">1. 데이터 분야에서 SQL</h2>
<ul>
  <li>큰 데이터를 processing하여 작은 데이터로 변환</li>
  <li>주어진 문제를 답하기 위해서 데이터 분석을 하기 위한 관점에서 사용</li>
  <li>서버에서의 DB와는 목적이 조금 다름
    <ul>
      <li>사용자들에 대한 정보, 상품에 대한 정보, 사용자의 행동에 대한 정보 등을 빠르게 저장하고 읽어서 서비스를 운영하기 위한 목적</li>
    </ul>
  </li>
</ul>

<h2 id="2-관계형-데이터베이스">2. 관계형 데이터베이스</h2>

<ul>
  <li>구조화된 데이터를 저장하는 데 사용되는 스토리지</li>
  <li>비구조화된 데이터는 저장할 수 없다는 의미
    <ul>
      <li>강점이자 약점</li>
      <li>우리가 분석하는 데이터는 대부분 구조화된 데이터임 -&gt; 이때는 가장 좋은 기술이 됨!</li>
    </ul>
  </li>
  <li>테이블로 데이터를 정의하고 저장
    <ul>
      <li>테이블에는 컬럼(열)과 레코드(행)이 존재</li>
    </ul>
  </li>
  <li>관계형 데이터베이스를 조작하는 프로그래밍 언어가 SQL
    <ul>
      <li>테이블 정의를 위한 DDL (Data Definition Language)</li>
      <li>테이블 데이터 조작/질의를 위한 DML (Data Manipulation Language)</li>
    </ul>
  </li>
</ul>

<h3 id="대표적인-rdb">대표적인 RDB</h3>
<ul>
  <li><strong>프로덕션 데이터베이스</strong>: MySQL, PostgreSQL, Oracle, …
    <ul>
      <li>OLTP (OnLine Transaction Processing)</li>
      <li>빠른 속도에 집중</li>
      <li>서비스에 필요한 정보 저장</li>
    </ul>
  </li>
  <li><strong>데이터 웨어하우스</strong>: Redshift, Snowflake, BigQuery, Hive, …
    <ul>
      <li>OLAP (OnLine Analytical Processing)</li>
      <li>처리 데이터 크기에 집중
        <ul>
          <li>빠른 속도가 중요하지는 않음</li>
          <li>처리할 수 있는 데이터가 얼마나 크냐가 포인트!</li>
        </ul>
      </li>
      <li>데이터 분석 혹은 모델 빌딩 등을 위한 데이터 저장
        <ul>
          <li>보통 프로덕션 데이터베이스를 복사해서 데이터 웨어하우스에 저장</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>프로덕션 데이터베이스만 있는 회사에 데이터 팀으로 조인할 경우
    <ul>
      <li>필요한 데이터를 뽑으려면 프로덕션 데이터베이스의 SQL을 실행해야 함</li>
      <li>프로덕션 데이터베이스는 서비스에 연동이 되어있기 때문에 큰 쿼리를 날려서 DB가 느려지면 전체 서비스에 영향을 끼치게 됨 -&gt; 백엔드와 마찰이 있을 것</li>
      <li>실수를 하게 될 수도 있음 or 계산이 매우 오래 걸리는 연산이 될 수 있음</li>
      <li>성장하는 스타트업에서 꼭 발생할 수 있는 일! -&gt; 별도의 DB로 <strong>데이터 웨어하우스</strong>가 필요해짐
        <ul>
          <li>서비스에는 영향이 가지 않음</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="3-관계형-데이터베이스의-구조">3. 관계형 데이터베이스의 구조</h2>
<ul>
  <li>가장 밑단에는 테이블들이 존재</li>
  <li>테이블들은 데이터베이스 (혹은 스키마)라는 폴더 밑으로 구성
    <ul>
      <li>raw data 스키마와 raw data를 가공해서 생긴 부가적인 데이터를 저장하는 스키마 등으로 분류할 수 있음</li>
    </ul>
  </li>
</ul>

<h3 id="테이블-구조">테이블 구조</h3>
<ul>
  <li>테이블은 레코드들로 구성 (행)</li>
  <li>레코드는 하나 이상의 필드(컬럼)로 구성 (열)</li>
  <li>필드는 이름과 타입과 속성(primary key)로 구성됨</li>
  <li>테이블 스키마 예시</li>
</ul>

<table>
  <thead>
    <tr>
      <th>컬럼</th>
      <th>타입</th>
      <th>속성</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>userId</td>
      <td>int</td>
      <td>PK</td>
    </tr>
    <tr>
      <td>sessionId</td>
      <td>varchar(32)|</td>
      <td> </td>
    </tr>
    <tr>
      <td>channel</td>
      <td>varchar(32)|</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h2 id="4-sql">4. SQL</h2>
<ul>
  <li>
    <p>관계형 데이터베이스에 있는 데이터를 질의하거나 조작해주는 언어</p>
  </li>
  <li><strong>DDL</strong>
    <ul>
      <li>테이블의 구조를 정의하는 언어</li>
    </ul>
  </li>
  <li><strong>DML</strong>
    <ul>
      <li>테이블에서 원하는 레코드들을 읽어오는 질의 언어</li>
      <li>테이블에 레코드를 추가/삭제/갱신해주는데 사용하는 언어</li>
    </ul>
  </li>
</ul>

<h3 id="장점">장점</h3>
<ul>
  <li>구조화된 데이터를 다루는 한 SQL은 데이터 규모와 상관없이 쓰임</li>
  <li>모든 대용량 데이터 웨어하우스는 SQL 기반
    <ul>
      <li>RedShift, Snowflake, BigQuery, Hive</li>
    </ul>
  </li>
  <li>Spark, Hadoop도 예외는 아님
    <ul>
      <li>SqarkSQL, Hive라는 SQL 언어가 지원됨</li>
    </ul>
  </li>
  <li>데이터 분야에서 일하고자 하면 반드시 익혀야할 기본 기술</li>
</ul>

<h3 id="단점">단점</h3>
<ul>
  <li>구조화된 데이터를 다루는데 최적화가 되어있음
    <ul>
      <li>정규표현식을 통해 비구조화된 데이터를 어느정도 다루는 것은 가능하나, 제약이 심함</li>
      <li>많은 관계형 데이터베이스들이 플랫한 구조만 지원함 (no nested like JSON)
        <ul>
          <li>구글 빅쿼리는 nested structure를 지원함</li>
        </ul>
      </li>
      <li>비구조화된 데이터를 다루는데 Spark, Hadoop과 같은 분산 컴퓨팅 환경이 필요해짐
        <ul>
          <li>즉, SQL만으로는 비구조화 데이터를 처리하지 못함</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>관계형 데이터베이스마다 SQL 문법이 조금씩 상이함</li>
</ul>

<h3 id="star-schema">Star schema</h3>
<ul>
  <li>프로덕션 데이터베이스용 관계형 데이터베이스에서는 보통 스타 스키마를 통해 데이터 저장</li>
  <li>데이터를 논리적 단위로 나누어 저장하고 필요시 조인</li>
  <li>스토리지 낭비가 덜하고 업데이트가 쉬움</li>
</ul>

<p><img width="409" alt="스크린샷 2023-11-13 오후 2 14 23" src="https://github.com/bokyung124/bokyung124.github.io/assets/53086873/4d8cb99f-938a-42a7-991f-468b45e91bf0" /></p>

<h3 id="denormalized-schema">Denormalized schema</h3>
<ul>
  <li>데이터 웨어하우스에서 사용하는 방식
    <ul>
      <li>데이터 웨어하우스는 스토리지 크기에 크게 상관이 없고, 데이터 웨어하우스에서 데이터를 업데이트 할 경우는 많지 않기 때문</li>
      <li>단위 테이블로 나눠 저장하지 않아 별도의 조인이 필요없는 형태</li>
    </ul>
  </li>
  <li>스토리지를 더 사용하지만, 조인이 필요없기 때문에 빠른 계산이 가능</li>
</ul>

<p><img width="302" alt="스크린샷 2023-11-13 오후 2 18 54" src="https://github.com/bokyung124/bokyung124.github.io/assets/53086873/cf6653d1-2fc7-4ad6-bd4f-d71152fbd2a9" /></p>

<h2 id="5-데이터-웨어하우스">5. 데이터 웨어하우스</h2>

<ul>
  <li>회사에 필요한 모든 데이터들을 저장</li>
  <li>여전히 SQL 기반의 관계형 데이터베이스
    <ul>
      <li>프로덕션 DB와는 별도이어야 함
        <ul>
          <li>OLAP vs. OLTP</li>
        </ul>
      </li>
      <li>AWS의 Redshift, Google Cloud의 Big Query, Snowflake 등이 대표적
        <ul>
          <li>고정비용 옵션 (Redshift) vs. 가변비용 옵션 (Big Query, Snowflake)</li>
          <li>고정비용 옵션은 시작하기엔 좋지만, 나중에 scalable issue가 발생할 수 있음 -&gt; 회사에 조인하여 DW를 결정해야 한다면 Big Query, Snowflake를 더 추천하긴 함</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>데이터 웨어하우스는 고객이 아닌 내부 데이터 팀을 위한 데이터베이스
    <ul>
      <li>처리 속도가 아닌 <strong>처리 데이터의 크기</strong>가 더 중요해짐</li>
    </ul>
  </li>
  <li><strong>ETL 혹은 데이터 파이프라인</strong>
    <ul>
      <li>외부에 존재하는 데이터를 읽어다가 데이터 웨어하우스로 저장해주는 과정이 필요해짐 -&gt; ETL / 데이터 파이프라인이라고 부름</li>
      <li>ETL (Extrack Transform Load)
        <ul>
          <li>외부에 존재하는 데이터 추출 -&gt; 원하는 포맷으로 변환 -&gt; 변환한 데이터를 DW의 테이블로 저장</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="6-데이터-인프라">6. 데이터 인프라</h2>

<ul>
  <li>데이터 엔지니어가 관리함</li>
  <li><strong>ETL &amp; 데이터 웨어하우스</strong></li>
  <li>한 단계 더 발전하면 Spark와 같은 대용량 분산처리 시스템이 인프라의 일부로 추가됨</li>
</ul>

<h3 id="데이터-순환-구조">데이터 순환 구조</h3>

<p>[반복]</p>
<ul>
  <li>사이트 방문 트래픽과 외부 데이터</li>
  <li>ETL - DW: 데이터 통합 및 요약 테이블 생성</li>
  <li>비즈니스 인사이트 도출</li>
  <li>개인화 등을 통한 제품 서비스 개선</li>
</ul>

<h2 id="7-클라우드와-aws">7. 클라우드와 AWS</h2>

<h3 id="클라우드">클라우드</h3>
<ul>
  <li>컴퓨팅 자원을 네트워크를 통해 서비스 형태로 사용하는 것</li>
  <li>No Provisioning</li>
  <li>Pay As You Go</li>
  <li>자원을 필요한만큼 (거의) 실시간으로 할당하여 사용한만큼 지불
    <ul>
      <li>탄력적으로 필요한만큼의 자원을 유지하는 것이 중요</li>
    </ul>
  </li>
  <li>클라우드 컴퓨팅이 없었다면
    <ul>
      <li>서버, 네트워크, 스토리지 구매와 설정 등을 직접 해야 함</li>
      <li>데이터센터 공간을 직접 확보해야 함 (Co-location)
        <ul>
          <li>확장이 필요한 경우 공간을 먼저 더 확보해야 함</li>
        </ul>
      </li>
      <li>그 공간에 서버를 구매하여 설치하고 네트워크 설정
        <ul>
          <li>보통 서버를 구매해서 설치하는데 적어도 두세달은 걸림</li>
        </ul>
      </li>
      <li>또한, Peak time을 기준으로 Capaticy planning을 해야 함
        <ul>
          <li>놀고 있는 자원들이 많아지는 현상 발생</li>
        </ul>
      </li>
      <li>직접 운영비용 vs. <strong>클라우드 비용</strong>
        <ul>
          <li>기회비용!</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>클라우드 컴퓨티의 장점
    <ul>
      <li>초기 투자 비용이 크게 줄어듦
        <ul>
          <li>CAPEX (Capital Expenditure) vs. <strong>OPEX (Operating Expense)</strong>: 클라우드</li>
        </ul>
      </li>
      <li>리소스 준비를 위한 대기 시간 대폭 감소
        <ul>
          <li>Shorter Time to Market</li>
        </ul>
      </li>
      <li>노는 리소스 제거로 비용 감소</li>
      <li>글로벌 확장 용이</li>
      <li>소프트웨어 개발 시간 단축
        <ul>
          <li>Managed Service (SaaS) 이용</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="8-aws">8. AWS</h2>

<h3 id="ec2---elastic-compute-cloud">EC2 - Elastic Compute Cloud</h3>

<ul>
  <li>AWS의 서버 호스팅 서비스
    <ul>
      <li>리눅스 혹은 윈도우 서버를 론치하고 계정을 생성하여 로그인 가능 (구글 앱 엔진과의 가장 큰 차이)</li>
      <li>최근에는 mac os도 지원</li>
    </ul>
  </li>
  <li>다양한 종류의 서버 타입 지원</li>
  <li>구매 옵션
    <ul>
      <li>On-Demand : 시간 당 비용 지불, 가장 흔히 사용</li>
      <li>Reserved : 1년이나 3년 간 사용을 보장하고 3-40% 할인 받는 옵션</li>
      <li>Spot Instance : 일종의 경매방식으로, 놀고있는 리소스들을 저렴한 비용으로 사용할 수 있는 옵션. 언제든지 서버가 다른 사람에게 넘어갈 수 있음</li>
    </ul>
  </li>
</ul>

<h3 id="s3---simple-storage-service">S3 - Simple Storage Service</h3>

<ul>
  <li>아마존이 제공하는 대용량 클라우드 스토리지 서비스</li>
  <li>데이터 저장 관리를 위해 계층적 구조 제공</li>
  <li>디렉토리를 버킷이라고 부름</li>
  <li>버킷이나 파일 별로 액세스 컨트롤 가능</li>
</ul>

<h3 id="기타-중요-서비스---database-service">기타 중요 서비스 - Database Service</h3>
<ul>
  <li>RDS (Relational Database Service)
    <ul>
      <li>MySQL, PostgreSQL, Aurora</li>
      <li>Oracle, MS SQL Server</li>
    </ul>
  </li>
  <li>Dynamo dB</li>
  <li><strong>Redshift</strong></li>
  <li>ElasticCache</li>
  <li>Neptune</li>
  <li>ElasticSearch</li>
  <li>MongoDB</li>
</ul>

<h3 id="기타-중요-서비스---al--ml-service">기타 중요 서비스 - AL &amp; ML Service</h3>
<ul>
  <li>SageMaker
    <ul>
      <li>딥러닝, 머신러닝 모델 생성, 테스트, API 배포 자동화 (end-to-end framework)</li>
    </ul>
  </li>
  <li>Lex
    <ul>
      <li>대화형 인터페이스 (챗봇 서비스)</li>
    </ul>
  </li>
  <li>Polly
    <ul>
      <li>Text to Speech 엔진</li>
    </ul>
  </li>
  <li>Rekognition
    <ul>
      <li>이미지 인식 서비스</li>
    </ul>
  </li>
</ul>

<h3 id="기타-중요-서비스">기타 중요 서비스</h3>
<ul>
  <li>Amazon Alexa
    <ul>
      <li>voice bot 플랫폼</li>
    </ul>
  </li>
  <li>Amazon Connect
    <ul>
      <li>Contact Center 솔루션</li>
      <li>콜센터 구현이 아주 쉬워짐</li>
    </ul>
  </li>
  <li>Lambda
    <ul>
      <li>서버리스 컴퓨팅 엔진
        <ul>
          <li>API 자체의 로직만 구현하면 됨</li>
        </ul>
      </li>
      <li>서비스 구현을 위해서 EC2를 론치할 필요가 없음</li>
      <li>구글 클라우드에는 Cloud Funtion이라는 이름으로 존재</li>
      <li>Azure에는 Azure Funtion이라는 이름으로 존재</li>
    </ul>
  </li>
</ul>

<h2 id="9-redshift">9. Redshift</h2>

<ul>
  <li>Scalable SQL 엔진</li>
  <li>2 PB까지 지원</li>
  <li>Still OLAP
    <ul>
      <li>응답속도가 빠르지 않기 때문에 프로덕션 DB로 사용 불가</li>
    </ul>
  </li>
  <li>Columnar storage
    <ul>
      <li>컬럼별 압축 가능</li>
      <li>컬럼을 추가하거나 삭제하는 것이 아주 빠름</li>
    </ul>
  </li>
  <li>벌크 업데이트 지원
    <ul>
      <li>레코드가 들어있는 파일을 S3로 복사 후 <code class="language-plaintext highlighter-rouge">COPY</code> 커맨드로 Redshift 일괄 복사
        <ul>
          <li>csv / JSON 등에 넣어서 한 번에 복사</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">INSERT</code> 로 수행할 수 있는 레코드 수는 제한이 있음</li>
    </ul>
  </li>
  <li><strong>고정 용량/비용</strong> SQL 엔진</li>
  <li>다른 데이터 웨어하우스처럼 primary key uniqueness를 보장하지 않음
    <ul>
      <li>프로덕션 DB들은 보장함</li>
      <li>이를 보장하려면 레코드가 추가 될 때마다 유일성을 체크해야 함</li>
      <li>데이터 엔지니어가 따로 보장을 해주어야 함</li>
    </ul>
  </li>
  <li>PostgreSQL 8.X와 SQL 호환이 됨
    <ul>
      <li>모든 기능을 지원하는 것은 아님
        <ul>
          <li>ex) text 타입이 Redshift에는 존재하지 않음</li>
        </ul>
      </li>
      <li>PostgreSQL 8.X를 지원하는 툴이나 라이브러리로 액세스 가능
        <ul>
          <li>JDBC/ODBC</li>
        </ul>
      </li>
      <li>SQL이 메인 언어라는 점 명심 -&gt; <strong>테이블 디자인</strong>이 아주 중요!</li>
    </ul>
  </li>
</ul>

<h3 id="redshift-schema-폴더-구성">Redshift Schema (폴더) 구성</h3>

<p><img width="455" alt="스크린샷 2023-11-13 오후 5 13 30" src="https://github.com/bokyung124/bokyung124.github.io/assets/53086873/207b77e2-2138-4bbe-b550-bdb8ef514858" /></p>

<pre><code class="language-SQL">CREATE SCHEMA raw_data;
CREATE SCHEMA analytics;
CREATE SCHEMA adhoc;
</code></pre>

<ul>
  <li>admin 권한을 가진 사람만 수행할 수 있는 SQL</li>
  <li>raw_data : 데이터 엔지니어가 ETL을 통해 읽어온 데이터</li>
  <li>analytics : 데이터 분석가가 분석 및 대시보드 생성 등등</li>
  <li>adhoc : 개발자, 데이터 팀이 테스트를 할 때 사용할 공간</li>
</ul>

<h3 id="redshift-액세스-방법">Redshift 액세스 방법</h3>
<ul>
  <li>이번 강좌에서는 Google Colab 사용 예정</li>
  <li>PostgreSQL 8.X와 호환되는 모든 툴과 프로그래밍 언어를 통해 접근 가능
    <ul>
      <li>SQL Workbench, Postico</li>
      <li>psycopg2 모듈</li>
      <li>Looker, Tableau 등 시각화 툴</li>
    </ul>
  </li>
</ul>]]></content><author><name>BoKyung</name></author><category term="Data Engineering" /><category term="DevCourse" /><category term="TIL" /><category term="DE" /><category term="KDT" /><summary type="html"><![CDATA[1. 데이터 분야에서 SQL]]></summary></entry><entry><title type="html">Crawling</title><link href="http://localhost:4000/2023/11/12/crawling.html" rel="alternate" type="text/html" title="Crawling" /><published>2023-11-12T00:00:00+09:00</published><updated>2023-11-12T00:00:00+09:00</updated><id>http://localhost:4000/2023/11/12/crawling</id><content type="html" xml:base="http://localhost:4000/2023/11/12/crawling.html"><![CDATA[]]></content><author><name>BoKyung</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[DEV] Django ORM QuerySet</title><link href="http://localhost:4000/data%20engineering/2023/11/11/queryset.html" rel="alternate" type="text/html" title="[DEV] Django ORM QuerySet" /><published>2023-11-11T00:00:00+09:00</published><updated>2023-11-12T02:00:00+09:00</updated><id>http://localhost:4000/data%20engineering/2023/11/11/queryset</id><content type="html" xml:base="http://localhost:4000/data%20engineering/2023/11/11/queryset.html"><![CDATA[<h2 id="queryset">QuerySet</h2>

<ul>
  <li>DB에서 전달받은 객체들의 모음 (list)</li>
  <li>Python으로 작성한 코드가 SQL로 mapping되어 QuerySet 자료형으로 넘어옴</li>
  <li>Django에서는 <code class="language-plaintext highlighter-rouge">속성</code>이 column, 속성에 부여된 <code class="language-plaintext highlighter-rouge">값</code>이 row 임 -&gt; <strong>dictionary</strong> 형태</li>
</ul>

<h2 id="objectsall">.objects.all()</h2>

<ul>
  <li><strong>QuerySet</strong> 타입</li>
  <li>테이블에 있는 모든 데이터 조회</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;QuerySet [&lt;Class: values&gt;, ]</code></li>
</ul>

<p><br /></p>

<h3 id="post-테이블"><code class="language-plaintext highlighter-rouge">Post</code> 테이블</h3>

<p><img width="386" alt="스크린샷 2023-11-14 오후 4 31 04" src="https://github.com/hyeok55/tech_dashboard/assets/53086873/10944b77-41e5-496f-84b9-b6bf48c8e9aa" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">all</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;QuerySet [&lt;Post: Local key-value 스토리지가 고민일땐 RocksDB 어때?,네이버,2023-11-07 00:00:00+00:00,1,0&gt;, &lt;Post: AI 경량화: 더 빠르고 저렴한 AI 서비스,네이버,2023-10-31 00:00:00+00:00,0,0&gt;, &lt;Post: Kafka에서 파티션 증가 없이 동시 처리량을 늘리는 방법 - Parallel Consumer,네이버,2023-10-24 00:00:00+00:00,0,0&gt;, &lt;Post: AOP in TypeScript,네이버,2023-10-17 00:00:00+00:00,0,0&gt;, &lt;Post: flatMap만 사용하기는 그만! Reactor 오퍼레이터 파헤치기,네이버,2023-09-22 00:00:00+00:00,0,0&gt;, &lt;Post: 시니어 개발자가 대화형 인공지능(ChatGPT)과 페어 프로그래밍하는 법(feat. DEVIEW 2023 코드 구현하기),네이버,2023-09-11 00:00:00+00:00,1,0&gt;, &lt;Post: flatMap만 사용하기는 그만! Reactor 오퍼레이터 파헤치기,네이버,2023-08-29 00:00:00+00:00,0,0&gt;, &lt;Post: "나는 네이버 프런트엔드 개발자입니다" 출간 여정기,네이버,2023-08-25 00:00:00+00:00,0,0&gt;, ...]&gt;
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>indexing으로 객체 불러올 수 있음</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">all</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">a</span>
<span class="c1"># &lt;Post: Local key-value 스토리지가 고민일땐 RocksDB 어때?,네이버,2023-11-07 00:00:00+00:00,1,0&gt;
</span>
<span class="n">a</span><span class="p">.</span><span class="nb">id</span>
<span class="c1"># 1
</span>
<span class="n">a</span><span class="p">.</span><span class="n">title</span>
<span class="c1"># 'Local key-value 스토리지가 고민일땐 RocksDB 어때?'
</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="c1"># &lt;class 'techs.models.Post'&gt;
</span></code></pre></div></div>

<h2 id="objectsget">.objects.get()</h2>

<ul>
  <li><strong>객체</strong> 타입
    <ul>
      <li><code class="language-plaintext highlighter-rouge">dot donation</code>으로 접근 가능</li>
    </ul>
  </li>
  <li>하나의 row만 조회
    <ul>
      <li>결과가 1건 이상일 경우 에러 발생</li>
    </ul>
  </li>
  <li>주로 pk 컬럼으로 조회</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Post: Local key-value 스토리지가 고민일땐 RocksDB 어때?,네이버,2023-11-07 00:00:00+00:00,1,0&gt;
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>옵션으로 가져올 수도 있음</li>
  <li>그러나, 옵션의 결과값이 항상 <strong>1개</strong>이어야 함!</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">title__startswith</span><span class="o">=</span><span class="sh">"</span><span class="s">TensorFlow</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="objectsfilter">.objects.filter()</h2>

<ul>
  <li><strong>QuerySet</strong> 타입</li>
  <li>특정 조건에 맞는 row만 조회</li>
  <li>AND <code class="language-plaintext highlighter-rouge">&amp;</code>, or <code class="language-plaintext highlighter-rouge">|</code> 옵션 사용 가능</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">title__startswith</span><span class="o">=</span><span class="sh">"</span><span class="s">TensorFlow</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;QuerySet [&lt;Post: TensorFlow를 활용한 네이버쇼핑의 상품 카테고리 자동 분류,네이버,2019-05-02 00:00:00+00:00,0,0&gt;, &lt;Post: TensorFlow를 활용한 네이버쇼핑의 상품 카테고리 자동 분류,네이버,2019-05-01 15:00:00+00:00,0,0&gt;, &lt;Post: TensorFlow.js: 웹 프론트엔드에서 머신러닝 활용하기,라인,2019-02-26 15:00:00+00:00,0,0&gt;]&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">date__year</span><span class="o">=</span><span class="mi">2023</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;QuerySet [&lt;Post: Local key-value 스토리지가 고민일땐 RocksDB 어때?,네이버,2023-11-07 00:00:00+00:00,1,0&gt;, &lt;Post: AI 경량화: 더 빠르고 저렴한 AI 서비스,네이버,2023-10-31 00:00:00+00:00,0,0&gt;, &lt;Post: Kafka에서 파티션 증가 없이 동시 처리량을 늘리는 방법 - Parallel Consumer,네이버,2023-10-24 00:00:00+00:00,0,0&gt;, &lt;Post: AOP in TypeScript,네이버,2023-10-17 00:00:00+00:00,0,0&gt;, &lt;Post: flatMap만 사용하기는 그만! Reactor 오퍼레이터 파헤치기,네이버,2023-09-22 00:00:00+00:00,0,0&gt;, &lt;Post: 시니어 개발자가 대화형 인공지능(ChatGPT)과 페어 프로그래밍하는 법(feat. DEVIEW 2023 코드 구현하기),네이버,2023-09-11 00:00:00+00:00,1,0&gt;, &lt;Post: flatMap만 사용하기는 그만! Reactor 오퍼레이터 파헤치기,네이버,2023-08-29 00:00:00+00:00,0,0&gt;, &lt;Post: "나는 네이버 프런트엔드 개발자입니다" 출간 여정기,네이버,2023-08-25 00:00:00+00:00,0,0&gt;, &lt;Post: 입만 가지고 떠드는 개발자가 ChatGPT에게 외주줘서 만든 Mysql 복제지연 모니터링,네이버,2023-08-22 00:00:00+00:00,0,0&gt;, &lt;Post: ZGC의 기본 개념 이해하기,네이버,2023-08-17 00:00:00+00:00,0,0&gt;, &lt;Post: 분산디비지만 노출은 하고싶어 - mongo로 노출 전용 DB 만들기,네이버,2023-08-16 00:00:00+00:00,0,0&gt;, ...]&gt;
</code></pre></div></div>

<h3 id="sql문-확인">SQL문 확인</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">title__startswith</span><span class="o">=</span><span class="sh">"</span><span class="s">TensorFlow</span><span class="sh">"</span><span class="p">).</span><span class="n">query</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="nv">`techs_post`</span><span class="p">.</span><span class="nv">`id`</span><span class="p">,</span> <span class="nv">`techs_post`</span><span class="p">.</span><span class="nv">`title`</span><span class="p">,</span> <span class="nv">`techs_post`</span><span class="p">.</span><span class="nv">`company_id`</span><span class="p">,</span> <span class="nv">`techs_post`</span><span class="p">.</span><span class="nv">`date`</span><span class="p">,</span> <span class="nv">`techs_post`</span><span class="p">.</span><span class="nv">`views`</span><span class="p">,</span> <span class="nv">`techs_post`</span><span class="p">.</span><span class="nv">`likes`</span><span class="p">,</span> <span class="nv">`techs_post`</span><span class="p">.</span><span class="nv">`url`</span> <span class="k">FROM</span> <span class="nv">`techs_post`</span> <span class="k">WHERE</span> <span class="nv">`techs_post`</span><span class="p">.</span><span class="nv">`title`</span> <span class="k">LIKE</span> <span class="nb">BINARY</span> <span class="n">TensorFlow</span><span class="o">%</span>
</code></pre></div></div>

<ul>
  <li>filter를 복잡하게 줄 경우 SQL문이 잘 실행되고 있는지 파악할 때 활용!</li>
</ul>

<h2 id="objectscount">.objects.count()</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">count</span><span class="p">()</span>

<span class="c1"># 3090
</span></code></pre></div></div>

<ul>
  <li>옵션 연결해서도 사용 가능</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">id__gt</span><span class="o">=</span><span class="mi">30</span><span class="p">).</span><span class="nf">count</span><span class="p">()</span>

<span class="c1"># 3060
</span></code></pre></div></div>

<h2 id="objectsvalues">.objects.values()</h2>

<ul>
  <li><strong>dictionary</strong> 타입</li>
</ul>

<h3 id="모든-필드">모든 필드</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Company</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">values</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;QuerySet [{'id': 11, 'company_name': 'SK플래닛'}, {'id': 5, 'company_name': '강남언니'}, {'id': 1, 'company_name': '네이버'}, {'id': 4, 'company_name': '당근'}, {'id': 13, 'company_name': '데보션'}, {'id': 10, 'company_name': '라인'}, {'id': 8, 'company_name': '무신사'}, {'id': 9, 'company_name': '뱅크샐러드'}, {'id': 2, 'company_name': '쏘카'}, {'id': 3, 'company_name': '왓챠'}, {'id': 15, 'company_name': '요기요'}, {'id': 18, 'company_name': '우아한형제들'}, {'id': 7, 'company_name': '이스트소프트'}, {'id': 14, 'company_name': '카카오'}, {'id': 16, 'company_name': '카카오엔터프라이즈'}, {'id': 6, 'company_name': '카카오페이'}, {'id': 17, 'company_name': '쿠팡'}, {'id': 12, 'company_name': '하이퍼커넥트'}]&gt;
</code></pre></div></div>

<h3 id="특정-필드">특정 필드</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">values</span><span class="p">(</span><span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;QuerySet [{'title': 'Local key-value 스토리지가 고민일땐 RocksDB 어때?'}, {'title': 'AI 경량화: 더 빠르고 저렴한 AI 서비스'}, {'title': 'Kafka에서 파티션 증가 없이 동시 처리량을 늘리는 방법 - Parallel Consumer'}, {'title': 'AOP in TypeScript'}, {'title': 'flatMap만 사용하기는 그만! Reactor 오퍼레이터 파헤치기'}, {'title': '시니어 개발자가 대화형 인공지능(ChatGPT)과 페어 프로그래밍하는 법(feat. DEVIEW 2023 코드 구현하기)'}, {'title': 'flatMap만 사용하기는 그만! Reactor 오퍼레이터 파헤치기'}, {'title': '"나는 네이버 프런트엔드 개발자입니다" 출간 여정기'}, {'title': '입만 가지고 떠드는 개발자가 ChatGPT에게 외주줘서 만든 Mysql 복제지연 모니터링'}, {'title': 'ZGC의 기본 개념 이해하기'}, {'title': '분산디비지만 노출은 하고싶어 - mongo로 노출 전용 DB 만들기'}, {'title': 'React 파이버 아키텍처 분석'}, {'title': '대규모 언어모델 너도 나도 업무에 사용해보자: To Beginner'}, {'title': '스마트 동기화 - File Provider를 사용한 똑똑한 동기화'}, {'title': '뭣? 딸깍 몇 번에 웹 E2E 테스트 코드를 생성하고 수행한다고? 에러도 잡아준다고? 영상도 뽑아준다고?'}, {'title': '성능 하면 빠질 수 없는 메모이제이션, 네가 궁금해'}, {'title': '네이버 검색 SRE 2편 - 측정하지 않으면 개선할 수 없다! SRE KPI 개발기'}, {'title': '네이버 검색 SRE 1편 - 차세대 검색 모니터링 시스템을 향한 여정'}, {'title': 'Spring Batch를 더 우아하게 사용하기 - Spring Batch Plus'}, {'title': '@webtoon/psd 라이브러리 개발기'}, '...(remaining elements truncated)...']&gt;
</code></pre></div></div>

<h2 id="objectsvalues_list">.objects.values_list()</h2>

<ul>
  <li><strong>list</strong> 타입</li>
  <li>각 데이터는 튜플로</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Company</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">values_list</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;QuerySet [(11, 'SK플래닛'), (5, '강남언니'), (1, '네이버'), (4, '당근'), (13, '데보션'), (10, '라인'), (8, '무신사'), (9, '뱅크샐러드'), (2, '쏘카'), (3, '왓챠'), (15, '요기요'), (18, '우아한형제들'), (7, '이스트소프트'), (14, '카카오'), (16, '카카오엔터프라이즈'), (6, '카카오페이'), (17, '쿠팡'), (12, '하이퍼커넥트')]&gt;
</code></pre></div></div>

<h2 id="objectsorder_by">.objects.order_by()</h2>

<ul>
  <li><strong>QuerySet</strong> 타입</li>
  <li>특정 필드를 기준으로 정렬</li>
  <li>기본 오름차순</li>
  <li>필드명 앞에 <code class="language-plaintext highlighter-rouge">-</code>가 붙으면 내림차순 정렬</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Company</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">order_by</span><span class="p">(</span><span class="sh">'</span><span class="s">-id</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;QuerySet [&lt;Company: 우아한형제들&gt;, &lt;Company: 쿠팡&gt;, &lt;Company: 카카오엔터프라이즈&gt;, &lt;Company: 요기요&gt;, &lt;Company: 카카오&gt;, &lt;Company: 데보션&gt;, &lt;Company: 하이퍼커넥트&gt;, &lt;Company: SK플래닛&gt;, &lt;Company: 라인&gt;, &lt;Company: 뱅크샐러드&gt;, &lt;Company: 무신사&gt;, &lt;Company: 이스트소프트&gt;, &lt;Company: 카카오페이&gt;, &lt;Company: 강남언니&gt;, &lt;Company: 당근&gt;, &lt;Company: 왓챠&gt;, &lt;Company: 쏘카&gt;, &lt;Company: 네이버&gt;]&gt;
</code></pre></div></div>

<h2 id="objectsfirst--last">.objects.first() / last()</h2>

<ul>
  <li><strong>객체</strong> 타입</li>
  <li>QuerySet 결과 중 가장 첫번째 / 마지막 row만 조회</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Company</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">first</span><span class="p">()</span>
<span class="c1"># &lt;Company: 네이버&gt;
</span>
<span class="n">Company</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">last</span><span class="p">()</span>
<span class="c1"># &lt;Company: 우아한형제들&gt;
</span></code></pre></div></div>

<h2 id="row-삭제">row 삭제</h2>

<ul>
  <li>삭제할 데이터를 변수에 저장하고 <code class="language-plaintext highlighter-rouge">.delete()</code></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">a</span><span class="p">.</span><span class="nf">delete</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name>BoKyung</name></author><category term="Data Engineering" /><category term="DevCourse" /><category term="TIL" /><category term="Django" /><category term="KDT" /><summary type="html"><![CDATA[QuerySet]]></summary></entry><entry><title type="html">[DEV] Django &amp;amp; Plotly 연동</title><link href="http://localhost:4000/data%20engineering/2023/11/11/project(1).html" rel="alternate" type="text/html" title="[DEV] Django &amp;amp; Plotly 연동" /><published>2023-11-11T00:00:00+09:00</published><updated>2023-11-12T02:00:00+09:00</updated><id>http://localhost:4000/data%20engineering/2023/11/11/project(1)</id><content type="html" xml:base="http://localhost:4000/data%20engineering/2023/11/11/project(1).html"><![CDATA[<h2 id="1-배경">1. 배경</h2>

<ul>
  <li>18개의 기업 별 테그 블로그를 크롤링해서 태그 별 빈도수 시각화 &amp; 글 모아 보여주기</li>
  <li>ERD</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/77157003/282078474-7f86280b-7908-494b-b31e-5c5a7c7e3984.png" alt="" /></p>

<h2 id="2-전체-태그-빈도수-시각화">2. 전체 태그 빈도수 시각화</h2>

<h3 id="viewspy">views.py</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">.models</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">django.http</span> <span class="kn">import</span> <span class="n">JsonResponse</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="k">def</span> <span class="nf">all_chart</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">tag_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="nf">from_records</span><span class="p">(</span><span class="n">Post_tag</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">all</span><span class="p">().</span><span class="nf">values</span><span class="p">(</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">).</span><span class="nf">distinct</span><span class="p">())</span>
    <span class="n">tag_df</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">tag_df</span><span class="p">[</span><span class="n">tag_df</span><span class="p">[</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="sh">''</span><span class="p">].</span><span class="n">index</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="n">tag</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="nf">from_records</span><span class="p">(</span><span class="n">Post_tag</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">all</span><span class="p">().</span><span class="nf">values</span><span class="p">(</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">))</span>
    <span class="n">tag</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">tag</span><span class="p">[</span><span class="n">tag</span><span class="p">[</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="sh">''</span><span class="p">].</span><span class="n">index</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">count</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">tag</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">).</span><span class="nf">size</span><span class="p">().</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">))</span>
    <span class="n">top_20</span> <span class="o">=</span> <span class="n">count</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">head</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>

    <span class="n">all_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">tag_df</span><span class="p">,</span> <span class="n">top_20</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span>
        <span class="n">all_df</span><span class="p">,</span> 
        <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Tag frequency in All posts</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">labels</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">Frequency</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">Tags</span><span class="sh">'</span><span class="p">},</span>
        <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span>
    <span class="p">)</span>
    <span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
        <span class="n">height</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span>
        <span class="n">yaxis</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">categoryorder</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">total ascending</span><span class="sh">'</span><span class="p">},</span>  
        <span class="n">yaxis_title</span><span class="o">=</span><span class="sh">'</span><span class="s">Tags</span><span class="sh">'</span><span class="p">,</span>   
        <span class="n">paper_bgcolor</span><span class="o">=</span><span class="sh">'</span><span class="s">#333</span><span class="sh">'</span><span class="p">,</span> 
        <span class="n">plot_bgcolor</span><span class="o">=</span><span class="sh">'</span><span class="s">#333</span><span class="sh">'</span><span class="p">,</span> 
        <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">color</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">white</span><span class="sh">'</span><span class="p">},</span>  
    <span class="p">)</span>

    <span class="n">plot_div</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="nf">to_json</span><span class="p">()</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Sending plot data...</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span> <span class="nc">JsonResponse</span><span class="p">({</span><span class="sh">'</span><span class="s">plot_div</span><span class="sh">'</span><span class="p">:</span> <span class="n">plot_div</span><span class="p">})</span>
</code></pre></div></div>

<ul>
  <li>model에서 데이터 불러와서 df로 변환할 때 <code class="language-plaintext highlighter-rouge">pd.DataFrame.from_records(queryset_dict)</code></li>
  <li>model에서 값을 가져올 때 ForeignKey라면 <code class="language-plaintext highlighter-rouge">부모 테이블__부모 테이블에서의 컬럼명</code></li>
  <li>Plotly 는 그래프를 JSON 형식으로 생성할 수 있음 -&gt; 클라이언트에서 JSON 받아서 그래프 생성</li>
  <li>JSON을 보낼 땐 <code class="language-plaintext highlighter-rouge">JsonResponse</code></li>
</ul>

<h3 id="urlspy">urls.py</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">path</span><span class="p">(</span><span class="sh">'</span><span class="s">visualization_all/</span><span class="sh">'</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">all_chart</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">all_chart</span><span class="sh">'</span><span class="p">),</span>  <span class="c1"># 추가
</span></code></pre></div></div>

<ul>
  <li>js에서 AJAX서버가 방문 할 url</li>
  <li>직접 이 주소로 들어가면 JSON 파일이 출력됨</li>
</ul>

<h3 id="homehtml">home.html</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;main&gt;</span>
        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"dashboard"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dashboard-title"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;h1&gt;</span>IT 직군 트렌드 분석<span class="nt">&lt;/h1&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dashboard-buttons"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"all-button"</span><span class="nt">&gt;</span>전체<span class="nt">&lt;/button&gt;</span>
                <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"company-button"</span><span class="nt">&gt;</span>기업별<span class="nt">&lt;/button&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"company-list"</span><span class="nt">&gt;&lt;/div&gt;</span>     <span class="c">&lt;!-- 기업 별 시각화 버튼 --&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"chart-container"</span><span class="nt">&gt;&lt;/div&gt;</span>  <span class="c">&lt;!-- 시각화 --&gt;</span>
        <span class="nt">&lt;/section&gt;</span>
        ...
    <span class="nt">&lt;/main&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">all-button</code> 버튼을 누르면 <code class="language-plaintext highlighter-rouge">chart-container</code>에 그래프를 띄우게 할 것</li>
</ul>

<h3 id="homejs">home.js</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">DOMContentLoaded</span><span class="dl">"</span><span class="p">,</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">//대시보드 이벤트 처리</span>
    <span class="kd">const</span> <span class="nx">allButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">all-button</span><span class="dl">"</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">chartContainer</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">chart-container</span><span class="dl">"</span><span class="p">);</span>

    <span class="c1">// 전체 버튼을 클릭했을 때의 처리</span>
    <span class="nx">allButton</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">companyList</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="dl">""</span><span class="p">;</span>
        <span class="nx">chartContainer</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="dl">""</span><span class="p">;</span>
        <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">visualization_all/</span><span class="dl">"</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
            <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">plot_div</span><span class="p">);</span>
                <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>
    <span class="p">});</span>
    <span class="p">...</span>
<span class="p">});</span>
</code></pre></div></div>

<h4 id="js---document">JS - document</h4>

<ul>
  <li>document 객체
    <ul>
      <li>웹페이지 그 자체</li>
      <li>웹페이지에 존재하는 HTML 요소에 접근하기 위해서는 반드시 document 객체부터 시작해야 함</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">getElementsById</code>
    <ul>
      <li>해당 아이디의 요소를 선택!</li>
      <li><code class="language-plaintext highlighter-rouge">ID</code>는 유일함</li>
      <li><code class="language-plaintext highlighter-rouge">ClassName</code>으로 검색한다면 해당 클래스에 속한 요소를 모두 선택함</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">createElement(HTML 요소)</code>
    <ul>
      <li>지정된 HTML 요소 생성</li>
    </ul>
  </li>
</ul>

<h4 id="js---fetch">JS - Fetch</h4>

<ul>
  <li>Fetch API
    <ul>
      <li>HTTP 파이프라인을 구성하는 요청과 응답 등의 요소를 JavaScript에서 접근하고 조작할 수 있는 인터페이스 제공</li>
      <li>기존 XMLHttpRequest를 대체</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">fetch()</code>
    <ul>
      <li>첫번째 인자로 <code class="language-plaintext highlighter-rouge">URL</code>, 두번째 인자로 <code class="language-plaintext highlighter-rouge">옵션 객체</code>를 받음</li>
      <li>옵션 객체에는 HTTP 방식, HTTP 요청 header, HTTP 요청 body 등을 설정할 수 있음</li>
      <li>응답 객체로부터는 HTTP 응답 상태, HTTP 응답 header, HTTP 응답 body 등을 읽어올 수 있음</li>
      <li>POST method로 폼 등을 사용해 데이터를 만들어 보내거나 비밀번호 등 개인정보를 보낼 수 있음
        <ul>
          <li>body 옵션에는 요청 전문을 JSON 포맷으로 넣어줌</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>본 프로젝트에서는
    <ul>
      <li>받은 json으로 <code class="language-plaintext highlighter-rouge">Plotly.newPlot()</code> 함수를 이용하여 그래프 생성
        <ul>
          <li><code class="language-plaintext highlighter-rouge">fig.data</code>, <code class="language-plaintext highlighter-rouge">fig.layout</code>은 그대로 써야함!</li>
        </ul>
      </li>
      <li>html로도 전달이 가능한 것 같은데, json을 사용하면 클라이언트 측에서 그래프를 더 유연하게 제어할 수 있음</li>
    </ul>
  </li>
</ul>

<h3 id="결과">결과</h3>

<ul>
  <li>[전체] 버튼을 눌렀을 때</li>
</ul>

<p><img width="1440" alt="스크린샷 2023-11-11 오후 2 14 27" src="https://github.com/hyeok55/tech_dashboard/assets/53086873/2f9954aa-76d6-470b-a0a6-9e66a35787a7" />        <br />
<img width="1440" alt="스크린샷 2023-11-11 오후 2 15 22" src="https://github.com/hyeok55/tech_dashboard/assets/53086873/889a81c5-8fda-4a5f-88ae-4cdcedf9cf96" /></p>

<h2 id="3-기업-별-태그-빈도수-시각화">3. 기업 별 태그 빈도수 시각화</h2>

<h3 id="viewspy-1">views.py</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">company_chart</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">company</span><span class="p">):</span>
    <span class="n">tag</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="nf">from_records</span><span class="p">(</span><span class="n">Company_Tag</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">company__company_name</span><span class="o">=</span><span class="sh">'</span><span class="s">{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">company</span><span class="p">)).</span><span class="nf">values</span><span class="p">(</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">))</span>
    <span class="n">count</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="nf">from_records</span><span class="p">(</span><span class="n">Company_Tag</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">company__company_name</span><span class="o">=</span><span class="sh">'</span><span class="s">{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">company</span><span class="p">)).</span><span class="nf">values</span><span class="p">(</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">))</span>
    <span class="n">company_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">company_df</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">company_df</span><span class="p">[</span><span class="n">company_df</span><span class="p">[</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="sh">''</span><span class="p">].</span><span class="n">index</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">top_20</span> <span class="o">=</span> <span class="n">company_df</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">head</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span>
        <span class="n">top_20</span><span class="p">,</span>
        <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Tag frequency in {} posts</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">company</span><span class="p">),</span>
        <span class="n">labels</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">Frequency</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">Tags</span><span class="sh">'</span><span class="p">},</span>
        <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">tag__tag_name</span><span class="sh">'</span>
    <span class="p">)</span>
    <span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
        <span class="n">height</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span>
        <span class="n">yaxis</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">categoryorder</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">total ascending</span><span class="sh">'</span><span class="p">},</span>  <span class="c1"># 빈도수가 높은 순으로 정렬
</span>        <span class="n">yaxis_title</span><span class="o">=</span><span class="sh">'</span><span class="s">Tags</span><span class="sh">'</span><span class="p">,</span>  <span class="c1"># y축 제목 설정
</span>        <span class="n">paper_bgcolor</span><span class="o">=</span><span class="sh">'</span><span class="s">#333</span><span class="sh">'</span><span class="p">,</span> <span class="c1"># 차트 바깥쪽 배경색
</span>        <span class="n">plot_bgcolor</span><span class="o">=</span><span class="sh">'</span><span class="s">#333</span><span class="sh">'</span><span class="p">,</span> <span class="c1"># 차트 안쪽 배경색
</span>        <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">color</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">white</span><span class="sh">'</span><span class="p">},</span>  <span class="c1"># 전체 글자(폰트) 색상
</span>    <span class="p">)</span>

    <span class="n">company_div</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="nf">to_json</span><span class="p">()</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Sending plot data...</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span> <span class="nc">JsonResponse</span><span class="p">({</span><span class="sh">'</span><span class="s">company_div</span><span class="sh">'</span><span class="p">:</span> <span class="n">company_div</span><span class="p">})</span>
</code></pre></div></div>

<h3 id="urlspy-1">urls.py</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">path</span><span class="p">(</span><span class="sh">'</span><span class="s">company_chart/&lt;str:company&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">company_chart</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">company_chart</span><span class="sh">'</span><span class="p">),</span> <span class="c1"># 추가
</span></code></pre></div></div>

<h3 id="homehtml-1">home.html</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;main&gt;</span>
        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"dashboard"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dashboard-title"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;h1&gt;</span>IT 직군 트렌드 분석<span class="nt">&lt;/h1&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dashboard-buttons"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"all-button"</span><span class="nt">&gt;</span>전체<span class="nt">&lt;/button&gt;</span>
                <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"company-button"</span><span class="nt">&gt;</span>기업별<span class="nt">&lt;/button&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"company-list"</span><span class="nt">&gt;&lt;/div&gt;</span>     <span class="c">&lt;!-- 기업 별 시각화 버튼 --&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"chart-container"</span><span class="nt">&gt;&lt;/div&gt;</span>  <span class="c">&lt;!-- 시각화 --&gt;</span>
        <span class="nt">&lt;/section&gt;</span>
        ...
    <span class="nt">&lt;/main&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<h3 id="homejs-1">home.js</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">DOMContentLoaded</span><span class="dl">"</span><span class="p">,</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">companyButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">company-button</span><span class="dl">"</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">companyList</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">company-list</span><span class="dl">"</span><span class="p">);</span>

    <span class="c1">// 기업별 버튼을 클릭했을 때의 처리</span>
    <span class="nx">companyButton</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">chartContainer</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="dl">""</span><span class="p">;</span>
        <span class="nx">companyList</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`
            &lt;div class="company-list"&gt;
                &lt;button id="gangnam-button"&gt;강남언니&lt;/button&gt;
                &lt;button id="naver-button"&gt;네이버&lt;/button&gt;
                &lt;button id="danggn-button"&gt;당근마켓&lt;/button&gt;
                &lt;button id="devocean-button"&gt;데보션&lt;/button&gt;
                &lt;button id="line-button"&gt;라인&lt;/button&gt;
                &lt;button id="musinsa-button"&gt;무신사&lt;/button&gt;
                &lt;button id="bank-button"&gt;뱅크샐러드&lt;/button&gt;
                &lt;button id="socar-button"&gt;쏘카&lt;/button&gt;
                &lt;button id="watcha-button"&gt;왓챠&lt;/button&gt;
                &lt;button id="yogiyo-button"&gt;요기요&lt;/button&gt;
                &lt;button id="woowa-button"&gt;우아한형제들&lt;/button&gt;
                &lt;button id="est-button"&gt;이스트소프트&lt;/button&gt;
                &lt;button id="kakao-button"&gt;카카오&lt;/button&gt;
                &lt;button id="kakaoenter-button"&gt;카카오 엔터프라이즈&lt;/button&gt;
                &lt;button id="kakaopay-button"&gt;카카오페이&lt;/button&gt;
                &lt;button id="coupang-button"&gt;쿠팡&lt;/button&gt;
                &lt;button id="hc-button"&gt;하이퍼커넥트&lt;/button&gt;
                &lt;button id="skplanet-button"&gt;SK플래닛&lt;/button&gt;
            &lt;/div&gt;
        `</span><span class="p">;</span>
    <span class="p">});</span>

    <span class="c1">// 특정기업 버튼 클릭했을시 처리</span>
    <span class="nx">companyList</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">gangnam-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/강남언니</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">naver-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/네이버</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">danggn-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/당근</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">devocean-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/데보션</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>
            
        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">line-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/라인</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">musinsa-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/무신사</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">bank-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/뱅크샐러드</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">socar-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/쏘카</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">watcha-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/왓챠</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">yogiyo-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/요기요</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">woowa-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/우아한형제들</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">est-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/이스트소프트</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">kakao-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/카카오</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">kakaoenter-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/카카오엔터프라이즈</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">kakaopay-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/카카오페이</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">coupang-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/쿠팡</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">hc-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/하이퍼커넥트</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>

        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">skplanet-button</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">fetch </span><span class="p">(</span><span class="dl">"</span><span class="s2">company_chart/SK플래닛</span><span class="dl">"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">fig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">company_div</span><span class="p">);</span>
                    <span class="nx">Plotly</span><span class="p">.</span><span class="nf">newPlot</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-container</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">fig</span><span class="p">.</span><span class="nx">layout</span><span class="p">);</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">))</span>
        <span class="p">}</span>
        
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p><img width="1440" alt="스크린샷 2023-11-11 오후 2 21 01" src="https://github.com/hyeok55/tech_dashboard/assets/53086873/0dcdb285-8e64-4c51-b110-7f82e829b251" />    <br />
<img width="1439" alt="스크린샷 2023-11-11 오후 2 21 34" src="https://github.com/hyeok55/tech_dashboard/assets/53086873/6c6e3e64-0065-4269-ba66-15d57ec43803" /></p>

<h2 id="4-아쉬운-점">4. 아쉬운 점</h2>
<ul>
  <li>기업 버튼 리스트를 모델에서 불러와서 동적으로 해보려 했는데 시간이 부족하여 우선 갖고 있는 리스트를 직접 넣었다.</li>
  <li>시각화를 두 가지 밖에 하지 못한 점이 아쉽다. 더 나아가 유저의 활동 (좋아요, 조회수 등)과도 연동해서 시각화를 해보면 좋을 것 같다.</li>
  <li>사소한 실수로 시간을 너무 많이 잡아먹은 것이 아쉽다. 또한, 아직 웹에 대한 이해가 부족해서 시간이 오래 걸렸던 점도 아쉽다. 캠프와 병행하며 웹 공부를 더 해봐도 좋을 것 같다.</li>
</ul>

<h2 id="5-사소한-실수">5. 사소한 실수</h2>

<ul>
  <li>views.py 에서 시각화 함수를 작성할 때 <code class="language-plaintext highlighter-rouge">fig.show()</code> 를 추가하면 <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> 안에 들어가는게 아니라 새로운 창에 그래프가 뜬다.. 이것 때문일 줄은 몰랐다. :(</li>
  <li>model에서 값을 가져올 때 <code class="language-plaintext highlighter-rouge">all()</code>, <code class="language-plaintext highlighter-rouge">filter()</code>, <code class="language-plaintext highlighter-rouge">values()</code>, <code class="language-plaintext highlighter-rouge">values_list()</code> 등으로 가져올 때 모두 타입이 다르다. 이것을 정리하면 좋을듯! =&gt; <strong>ORM QuerySet</strong></li>
</ul>]]></content><author><name>BoKyung</name></author><category term="Data Engineering" /><category term="DevCourse" /><category term="TIL" /><category term="프로젝트" /><category term="KDT" /><category term="Django" /><summary type="html"><![CDATA[1. 배경]]></summary></entry><entry><title type="html">[DEV] 좋은 코드를 작성하려면</title><link href="http://localhost:4000/data%20engineering/2023/11/10/clean_code.html" rel="alternate" type="text/html" title="[DEV] 좋은 코드를 작성하려면" /><published>2023-11-10T00:00:00+09:00</published><updated>2023-11-11T02:00:00+09:00</updated><id>http://localhost:4000/data%20engineering/2023/11/10/clean_code</id><content type="html" xml:base="http://localhost:4000/data%20engineering/2023/11/10/clean_code.html"><![CDATA[<h2 id="1-효과적인-학습-방법">1. 효과적인 학습 방법</h2>

<ul>
  <li>긍정적인 감정 이입하기
    <ul>
      <li>잘 모르는 용어나 개념도 반복해서 듣고 사용하다 보면 익숙해짐</li>
      <li>계속해서 새로운 개념들이 나오는 분야이기 때문에 모르는 용어, 주제도 긍정적으로 바라보는 자세를 가져야 함!</li>
    </ul>
  </li>
  <li>긴 호흡으로 바라보기
    <ul>
      <li>공부해야 할 내용이 굉장히 많다보니 시간이 부족할 수 있음</li>
      <li>한번 뒤쳐졌다고 포기하지 말고 늦게라도 계속해서 따라가기</li>
      <li>경우에 따라서는 2번 듣는다고 생각하기
        <ul>
          <li>처음은 빠르게 듣고, 다시 한번 조금 느리게 따라가보기</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>그냥 열심히 하기!
    <ul>
      <li>큰 방향을 가지고 하루하루 열심히 하기</li>
    </ul>
  </li>
  <li>긍정적인 자세</li>
  <li>남과 비교하지 않기</li>
  <li>커리어를 길게 보기</li>
  <li>질문 잘하기</li>
  <li>의사소통 잘하기</li>
  <li>문제 정의 잘하기</li>
  <li>결과 내기</li>
</ul>

<p><br /></p>

<ul>
  <li>프로그래밍 언어 선택하기
    <ul>
      <li>하나의 언어를 깊게!</li>
    </ul>
  </li>
  <li>구문 및 데이터 유형 이해하기
    <ul>
      <li>기본 문법 이해 -&gt; 고급 문법 이해</li>
      <li>상황에 맞게 적합한 구문과 데이터 유형 사용</li>
      <li>많이 코딩 해보기 + 고민해보기</li>
      <li>남의 코드 보고 배우고 내 코드 리뷰 받기
        <ul>
          <li>리뷰해줄 사람이 없다면 chatGPT 이용!</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>깔끔하고 읽기 쉬운 코드 작성
    <ul>
      <li>많이 코딩 해보면서 리뷰 받는 것이 핵심</li>
      <li>팀에 시니어가 없다면 오픈소스 코드 보기</li>
    </ul>
  </li>
  <li>생산성 툴 익히기
    <ul>
      <li>Git, Github
        <ul>
          <li>커맨드라인에서 자유롭게 커밋하고 브랜치만들고 PR 만들기</li>
        </ul>
      </li>
      <li>소스코드 에디터 (IDE)
        <ul>
          <li>단축키 많이 사용해보기</li>
          <li>플러그인 많이 사용해보기</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="2-좋은-코드">2. 좋은 코드</h2>

<ul>
  <li>깔끔한 코드는 읽고 이해하고 수정하기 쉬움</li>
  <li>코드는 명확한 이름, 일관된 형식, 의미 있는 주석으로 체계적으로 구성
    <ul>
      <li>chatGPT 활용!</li>
    </ul>
  </li>
  <li>좋은 코드는 테스트가 가능하며, 코드와 함께 유닛 테스트를 작성해야 함</li>
  <li>클래스와 함수는 분명한 하나의 일을 하도록 구현해야 함</li>
  <li>코드는 모듈화 되어야 하며 중복을 피해야 함
    <ul>
      <li>모듈화 - 하나 하나의 기능은 완전해야 함!</li>
    </ul>
  </li>
  <li>오류 처리는 코드베이스 전체에서 철저하고 일관성 있게 이루어져야 함 (로깅)</li>
  <li>코드는 작성자가 아닌 사용자를 염두에 두고 설계해야 함</li>
  <li>단, 중요한 일에 더 완벽을 기할 것!</li>
</ul>

<h3 id="코드-작성-원칙">코드 작성 원칙</h3>
<ul>
  <li>DRY (Don’t Repeat Yourself)
    <ul>
      <li>같은 코드 여러번 작성 X</li>
      <li>한 번 작성하여 필요한 곳에 재사용할 수 있는 방법을 찾아야 함!</li>
      <li>반복되는 작업이라면 <strong>함수</strong>로</li>
      <li>동일한 일이 반복된다면 <strong>반복문</strong>으로</li>
      <li>비슷한 클래스를 반복해서 만든다면 <strong>클래스 계승 구조</strong>를 사용해볼 것</li>
    </ul>
  </li>
  <li>KISS (Keep It Simple, Stupid)
    <ul>
      <li>불필요한 복잡성을 피하고, 코드를 가능한 한 단순하게 유지
        <ul>
          <li>코드를 꼭 짧게 작성해야 한다는 것이 아님 (특히 lambda 함수)</li>
          <li>내장 함수 사용</li>
        </ul>
      </li>
      <li>너무 많은 기능을 하나의 함수로 구현하지 말 것</li>
      <li>한 함수가 너무 길어지면 이를 다수의 함수로 나눌 것</li>
      <li>결국 읽기 쉽고 이해하기 쉬운 코드를 작성하기 위해 노력
        <ul>
          <li>다른 사람들이 사용하기 쉽고 테스트가 쉬워짐</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="3-기술-부채와-스타트업">3. 기술 부채와 스타트업</h2>

<ul>
  <li>스타트업의 경우 기술 부채가 점점 커짐
    <ul>
      <li>의도적으로 코드의 품질보다는 속도에 초점을 맞추게 됨</li>
      <li>스타트업 코드에 기술 부채가 없다면 뭔가 잘못된 것</li>
    </ul>
  </li>
  <li>어느 시점에는 이를 갚기 위해 코드/서비스 리팩토링을 시작해야 함
    <ul>
      <li>어느정도 생존하게 되었는데, 이제는 기술 부채로 인해 회사의 운명이 위험해지는 경우</li>
      <li>서비스 관련 사고들의 빈도수와 심각성 트래킹 -&gt; 대형사고 발생 -&gt; 기술 부채를 갚아야 하는 시점
        <ul>
          <li>테스트 작성 노력 -&gt; 테스트 범위 (Test Coverage) 늘리기</li>
          <li>CI/CD 도입</li>
        </ul>
      </li>
      <li>새 기능 개발과 기존 코드 리팩토링을 적절히 밸런스 (60:40 정도)</li>
    </ul>
  </li>
</ul>

<h2 id="4-코딩-원칙">4. 코딩 원칙</h2>

<h3 id="일반적인-원칙">일반적인 원칙</h3>

<ul>
  <li>일관된 포맷 및 이름 지정 규칙</li>
  <li>의미있고 설명적인 변수 이름 사용</li>
  <li>적절한 주석 및 문서화</li>
  <li>제어 구조와 알고리즘의 효율적인 사용</li>
  <li>구글 파이썬 스타일링 가이드
    <ul>
      <li><a href="https://google.github.io/styleguide/pyguide.html">https://google.github.io/styleguide/pyguide.html</a></li>
    </ul>
  </li>
</ul>

<h3 id="제어-구조와-알고리즘의-효율적인-사용">제어 구조와 알고리즘의 효율적인 사용</h3>

<ul>
  <li>Generator 함수</li>
  <li>List Comprehension</li>
  <li>Lambda 함수</li>
</ul>

<h2 id="5-코드-리뷰">5. 코드 리뷰</h2>

<ul>
  <li>주니어 개발자나 새로 온 개발자들을 트레이닝 시키는 최선의 방법</li>
  <li>단점은 리뷰를 해야 하는 사람들이 이미 바쁜 사람들이라는 점
    <ul>
      <li>스프린트 플래닝 시 이를 고려하여 태스트 할당</li>
    </ul>
  </li>
  <li>코드리뷰를 하는 이유
    <ul>
      <li>교육</li>
      <li>심각한 버그 예방</li>
      <li>보안 상의 문제가 있는 코드 등 방지</li>
      <li>누가 언제 코드를 바꿨는지 기록 -&gt; trouble shooting</li>
      <li>읽기 쉬운 코드 유지</li>
    </ul>
  </li>
  <li>코드리뷰를 요청하는 이
    <ul>
      <li>요청시 되도록 조금씩 자주 요청 (Unit test와 같이 요청하면 최상)</li>
      <li>주석을 최대한 추가하고, 무슨 이유에서 뭘 하려고 하는 것인지 설명</li>
      <li>리뷰에 대한 피드백을 너무 감정적으로 받아들이지 않기</li>
    </ul>
  </li>
  <li>코드리뷰를 하는 이
    <ul>
      <li>코딩 스타이렝 대한 것보다는 코드 자체에 대해 이야기</li>
      <li>객관적으로 쓰고, 비판적인 어조는 피하기</li>
      <li>충분히 시간을 들여 도움이 되는 리뷰 제공</li>
    </ul>
  </li>
  <li>코드 리뷰에 편리한 툴 사용</li>
</ul>

<h3 id="구글-코드-리뷰">구글 코드 리뷰</h3>

<ul>
  <li>코드 리뷰는 1명이어도 괜찮음, but 꼭 1명 이상의 리뷰를 받아야 merge 할 수 있음</li>
  <li>Readability가 가장 중요</li>
  <li>
    <p>본인의 스타일이 아닌, 레포 주인의 스타일을 따라야 함</p>
  </li>
  <li>리뷰어는 꼭 시니어가 아니어도 괜찮음
    <ul>
      <li>readability를 충족하도록</li>
    </ul>
  </li>
</ul>

<h2 id="6-test">6. Test</h2>

<ul>
  <li>Unit Test
    <ul>
      <li>모듈의 특정 기능(함수) 테스트</li>
    </ul>
  </li>
  <li>Integration Test
    <ul>
      <li>여러 모듈을 통합하여 하는 한 차원 위의 테스트</li>
    </ul>
  </li>
  <li>Acceptance Test
    <ul>
      <li>트래픽 등을 생성하여 시스템에 로드를 주고 견디는지 보는 테스트</li>
    </ul>
  </li>
  <li>UI Test
    <ul>
      <li>요즘은 Selenium 등의 툴을 이용하여 웹페이지 자체의 기능을 테스트하는 것이 대세</li>
    </ul>
  </li>
</ul>

<h3 id="테스트의-중요성">테스트의 중요성</h3>

<ul>
  <li>많은 회사들이 코드 변경의 일부로 Unit Test를 의무적으로 요구
    <ul>
      <li>테스트가 없으면 아예 코드 체크인이 실패하는 회사도 있음</li>
    </ul>
  </li>
  <li>테스트가 많을수록 이점 증대
    <ul>
      <li>시스템의 안정성 증대</li>
      <li>나중에 리팩토링할 경우 혹은 신입 엔지니어가 코드를 수정할 때 굉장히 편리</li>
    </ul>
  </li>
  <li>어떤 경우에는 테스트를 작성하기가 너무 힘든 경우들이 있음
    <ul>
      <li>이 경우 스프린트 플래닝 때 시간을 넉넉히 배당</li>
    </ul>
  </li>
</ul>

<h3 id="test-coverage">Test Coverage</h3>
<ul>
  <li>실행 가능 경로 중 몇 퍼센트나 테스트가 되어있는지 그 퍼센트를 나타냄</li>
  <li>Test Coverage가 높을수록 시스템이 안정됨은 물론이고 부수적인 효과가 존재
    <ul>
      <li>해당 모듈을 리팩토링시 굉장히 유용</li>
      <li>새 엔지니어가 들어와서 작업 시 또한 유용</li>
    </ul>
  </li>
</ul>

<h3 id="unit-test">Unit Test</h3>

<ul>
  <li>자신이 만든 소프트웨어의 특정 기능을 테스트하는 것
    <ul>
      <li>많은 경우 특정 함수를 테스트하는 것</li>
      <li>특정 입력에 대해 예상되는 특정 출력이 나오면 성공, 아니면 실패 / 혹은 나오지 말아야 할 출력이 나오면 실패하는 식으로 작성</li>
    </ul>
  </li>
  <li>Integration Test나 Functional Test에 비해 가장 낮은 레벨의 기본 테스트</li>
</ul>

<h3 id="python에서-unit-test">Python에서 Unit Test</h3>
<ul>
  <li>unittest 모듈</li>
  <li>
    <p>요즘은 pytest</p>
  </li>
  <li>테스트 클래스 내의 <code class="language-plaintext highlighter-rouge">test_*</code> 함수</li>
  <li>출력의 타입에 따라 다른 함수들을 사용해서 테스트 성공 여부 결정
    <ul>
      <li><code class="language-plaintext highlighter-rouge">assertEqual(a, b)</code> : a와 b 두 객체가 같으면 True, 다르면 False</li>
      <li><code class="language-plaintext highlighter-rouge">assertTrue(a)</code> : a가 True면 성공, False면 실패</li>
      <li><code class="language-plaintext highlighter-rouge">assertRaises</code> : 주어진 입력에 대해 예상한 Exception이 나는지 확인</li>
    </ul>
  </li>
</ul>

<h2 id="7-cicd-프로세스를-구현하려면">7. CI/CD 프로세스를 구현하려면</h2>

<ul>
  <li>Software Engineering Practice의 하나</li>
  <li>하나의 코드 repository를 유지</li>
  <li>코드 변경을 계속해서 위의 코드 repository에 반영</li>
  <li>유닛 테스트를 추가
    <ul>
      <li>Repository의 Test Coverage를 70% 이상으로 유지</li>
    </ul>
  </li>
  <li>안정적인 테스트 환경 준비</li>
  <li>빌드 생성 자동화 (테스트 포함)
    <ul>
      <li>Commit Build vs. Nightly Build</li>
    </ul>
  </li>
  <li>빌드 배포 자동화 (CD)</li>
</ul>]]></content><author><name>BoKyung</name></author><category term="Data Engineering" /><category term="DevCourse" /><category term="TIL" /><category term="특강" /><category term="KDT" /><summary type="html"><![CDATA[1. 효과적인 학습 방법]]></summary></entry><entry><title type="html">[DEV] Django 협업</title><link href="http://localhost:4000/data%20engineering/2023/11/09/django_git.html" rel="alternate" type="text/html" title="[DEV] Django 협업" /><published>2023-11-09T00:00:00+09:00</published><updated>2023-11-10T03:00:00+09:00</updated><id>http://localhost:4000/data%20engineering/2023/11/09/django_git</id><content type="html" xml:base="http://localhost:4000/data%20engineering/2023/11/09/django_git.html"><![CDATA[<h2 id="1-배경">1. 배경</h2>

<ul>
  <li>Django 프로젝트에서 팀원이 이미 개발하고 있던 웹 프로젝트를 받아서 협업해야 하는 상황</li>
  <li>가상환경 위에서 개발 중이어서 그 가상환경을 그대로 이용하면 되겠다고 생각했는데, vscode에서 파이썬 인터프리터를 인식하지 못함</li>
  <li>검색해보니 내 로컬에서 가상환경을 새로 만들어야 함을 알게됨!</li>
</ul>

<h2 id="2-방법">2. 방법</h2>

<h3 id="1-개발-상황">1) 개발 상황</h3>

<ul>
  <li>레포지토리 이름: tech_dashboard</li>
  <li>가상환경 이름: techblog_dashboard</li>
  <li>프로젝트 이름: techblog</li>
  <li>앱 이름: techs</li>
</ul>

<h3 id="2-레포지토리-클론">2) 레포지토리 클론</h3>

<ul>
  <li>홈 디렉토리에 만들고자 함</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~
git clone <span class="o">[</span>레포지토리 주소]
<span class="nb">cd </span>tech_dashboard
</code></pre></div></div>

<h3 id="3-requirementstxt-생성">3) requirements.txt 생성</h3>

<ul>
  <li>연동할 가상환경 폴더에서 생성</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>techblog_dashboard
pip list  <span class="c">## 확인</span>

pip freeze <span class="o">&gt;</span> requirements.txt
</code></pre></div></div>

<h3 id="4-gitignore-생성">4) gitignore 생성</h3>

<ul>
  <li>가상환경을 생성하면 매우매우 많은 파일이 생김 -&gt; 올릴 필요 없음</li>
  <li><a href="https://www.toptal.com/developers/gitignore">https://www.toptal.com/developers/gitignore</a> 에서 python, django, venv 입력하여 생성</li>
  <li><code class="language-plaintext highlighter-rouge">.gitignore</code> 파일 생성 후 복붙 -&gt; push</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch requirements
git checkout requirements

git commit <span class="nt">-m</span> <span class="s2">"add requirements.txt"</span>
git push origin requirements
</code></pre></div></div>

<h3 id="5-내-가상환경-생성-및-접속">5) 내 가상환경 생성 및 접속</h3>

<ul>
  <li>홈디렉토리에서</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~ 
python <span class="nt">-m</span> venv techblog_dashboard
<span class="nb">source </span>techblog_dashboard/bin/activate
</code></pre></div></div>

<h3 id="6-requirements-적용">6) requirements 적용</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>tech_dashboard/techblog_dashboard
pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
</code></pre></div></div>]]></content><author><name>BoKyung</name></author><category term="Data Engineering" /><category term="DevCourse" /><category term="TIL" /><category term="Web" /><summary type="html"><![CDATA[1. 배경]]></summary></entry></feed>